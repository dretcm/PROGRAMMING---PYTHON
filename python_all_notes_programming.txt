------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------" Python "------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

--------->> FUNCION MAIN : NAME MAIN :

//INCOVAR UNA FUNCION ANTES QUE TODAS LAS LINEAS DE COMANDO ANTERIORES A ESTA :

def principal():
	print("gatos")
print("hola")

if __name__=="__main__":
	principal()
	print("felinos")

SALIDA ::

gatos
felinos
hola
	
---------->>> DICCIONARIO MULTIPLE :

dic_account={"a":{1:"a",2:"ADMINISTRADOR",3:"Todo el mundo"}}

f ={'alex':{1:123,2:"alexander",3:"peru"}}
f['alex'][1]=222
print(f['alex'][1])

def go_back():
	if(c_user.get() not in dic_account):
		dic_account[c_user.get()]={}
		dic_account[c_user.get()][1] = c_pass.get()
		dic_account[c_user.get()][2] = c_fullname.get()
		dic_account[c_user.get()][3] = c_var_pais.get()

---------------------------->>> PARA QUE FUNCION EL INT PRIMARY KEY AUTOINCREMENT :

("create table empleados(id integer primary key autoincrement,name text,salario float,bono text)")

alex.insert_data("insert into empleados (name,salario,bono) values(?,?,?)",lista_datos)  //el id se aumentara solo

---------------NUEVO -----> PICKLE USE: 

import pickle

dic ={1:'alex',2:'carpio',3:'mamani'}
ga = open("todo.pickle",'wb')
pickle.dump(dic,ga)
ga = open("todo.pickle",'rb')
dic1 = pickle.load(ga)
print(dic1[2])
ga.close()


------------------->>> BORRA TODO LO QUE PONGA PARA LIMPIAR ALGO :

palabra.strip(" ") //en este caso borra todos los espacios, puedes cambiar lo q queires borrar introduciendolo en los parentesis.

------------------->>> ASIGNACION MULTIPLE :

cadena = "alexander-carpio-mamani"
a, b, c = cadena.split("-")
print(a)
print(b)
print(c)

cadena = ["1","2","3"]
a, b, c = map(int, cadena)
print(a)
print(b)
print(c)

# SALIDA : 

alexander
carpio
mamani
1
2
3

1 ----------> 
print("para que lo imprimido sea de forma lateral: ",variable,end=" ")
y usar " pass " es como un comentario pero no ignorado, así que no pasa nada solo es como para probar algo o ya sabes.
2 ---------> 
#en listas:
lista.append(añade_elemento) # para añadir elementos a las listas.
lista.extend([x,y,z]) # para exterder a la lista con elementos puestos.
lista.insert(poscicion,valor) # para colocar un elemento " y "en la posicion "x".
lista.clear() # para eliminar todos los elementos de la lista.
lista.pop(posicion_a_eliminar) # para eliminar cierto elemto en la poscicion "x".
lista.remove(valor_a_eliminar)
lista.index(palabra_a_buscar) #te devuelve la poscicion.
# para hacer las famosas matrices primero crearemos " matriz " que sera la principal, luego en los " for "  agregaremos mas listas " matriz1 "para que estas sean rows o filas
# ejemplo:

matriz=[]

r=int(input(" Enter quantity of rows: "))
c=int(input(" Enter quantity of columns: "))

for i in range(r):
    matriz1=[]
    for f in range(c):
        a=int(input(" Enter number in position ["+str(i)+"]["+str(f)+"]: "))
        matriz1.append(a)   # aqui agregamos elementos "a" ingresados por teclado a la matriz secundaria o las filas.
    matriz.append(matriz1)  # aqui agregamos la sublista a la lista principal.
# conejos: cuando se traten de coleciones(listas, tuplas, conjuntos, diccionarios y no sé que más) usaremos cada herramienta posible para definir estas segun sean sus caracteristicas principales
# osea si queremos ordenar algo, agregar, eliminar, usaremos listas(list(x)), si queremos solo saber que elementos hay sin repetirce usaremos "set(x)", si queremos
# que tengan claves con valores usaremos "dict(zip(lista1,lista2))" donde veremos una mejor explicación en el punto 8, y "set" para convertirlos en conjuntos, tambien me olvidaba de las tuplas
# que son "tuple(x)"que como que las convierten a constantes o algo así.
3-->>
#para verificar si una palabra esta en una cadena se debe usar
palabra.count('hi')------average es promedio
#donde palabra es la cadena, .count es el metodo o method, y lo 1 va ('hi') es la palabra q queremos verificar si esta en la cadena.
#el  "lista.count(2) tambien sirve para listas y ver cuantas vesces esta ese numero en la lista, tipo contador.
# ejemplo normalico:
list=[1,1,2,3,1,5,5,5,6,7,5]
for i in range(len(list)):
    cont=list.count(list[i])
# veremos que sacara la cantidad de vesces que hay un mismo numero en la lista
# ejem  " cont=list.count(1) " donde con seria " cont=3 ".
# ejem  " cont=list.count(7) " donde con seria " cont=1 ".
# ejem  " cont=list.count(5) " donde con seria " cont=4 ".
# Este es un ejemplo avanzado:
list=[1,1,2,3,1,5,5,5,6,7,5]
max(set(list), key=list.count)
print("the mode is: ",max(set(list), key=list.count))
#LISTA COMPRIMIDA CON FOR AND IF

f=[ i for i in [1,2,3,4,5,6,7,8,9,10] if i % 2==1]   #extrae los numeros primos de 1 a 10.
print(f)  

# o con un filter y lambda:
                       
print(list(filter(lambda x:x%2==1,[1,2,3,4,5,6,7,8,9,10])))
4---->>
# para genera numeros aleatorios se debe usar
import random
val=random.randint(minimo,maximo)
# en minimo y maximo van los limites
5--->>
# para ordenar una lista se usa el comando "lista.sort()" y para invertirla o verla al revez seria "lista.sort(reverse=True)".
# tambien se puede usar "lista.reverse()" para voltear la lista perono ordenarla
6--->>
# para instalar algo se podria usar "pip install Howdoi " como ejemplo.
7--->>
# usar funtion max(algo) or min(algo) or suma(algo) de una lista o colecciones para hallar el maximo, minimo, y suma total.
8--->>
# usar "zip", esta sirve para unir listas, o colecciones para transformarlas en un dicionario con sus respectivas llaves o keys y valores o values
ejemplo:
list1=[]
list2=[]
dates1=dict(zip(list1,list2))
# donde "list1" es igual a "keys"
# y "list2" es igual a "values"
9--->>
# el "set()" sirve para convertir una lista,tupla,etc a un conjunto
# donde lo más relevante de un conjunto es no repetir ningun elemento
# ejemplo:
list1=[1,1,1,2,3,3,4,5,5,7]
# pero con set(list1) o sea
list2=set(list1)
print(list2)
[1,2,3,4,5,7]
10--->>
# para hacer potencias y raices importamos la libreria math "import math".
import math
print(math.pow(x,y))   # donde " x " es el numero y " y " es a cuanto queremos elevarlo.
print(math.sqrt(x))    # donde podremos sacarle raices cuadradas, pero si queires cubicas usemos:
print(round(x**(1/3))) # asi serian una raiz cubica, obvio que hay muchas más formas pero pense si podia hacer eso.
print(x**float(1/3))   # tambien encontre esta en internet y creo que tendria más sentido, y entre 2, 4, 5, etc.
11--->>
                              # para un ejecutable usaremos el " import time ".
import time
time.sleep(3)                 # donde "time.sleep(x) " es la funcion principal y "x" cuantos segundos de retraso queremos para finalizar algo o el programa.
12--->
                              # para crear modulos(funciones), debemos crear primero un .py para que cuando lo llamemos sea asi
import modulos_creados 
                              # despues llamamos a la funcion dentro de ese modulo
modulos_creados.suma_total(lista1)
                              # para no poner o escribir el indice del import usaremos
from modulos_creados import * 
                              # o solo 
from modulos_creados import suma_total 
                              # para algo especifico
                              # recuerda el modulo y el codigo o programa que este generando deben estar guardados en el mismo lugar 
13-->>
# para " CLASES Y OBJETOS " o para acostumbrarce " CLASS AND OBJECTS " ejemplos:
class Humano:
     def __init__(self,edad):
         self.edad=edad     # donde self viene a reflejar como un objeto a ingresar como el input ya veran más abajo y edad y self viene a ser como parametro y etc tú te entiendes.
         print(" hola esta es una clase")
     def hablar(self,mensaje):
         print(mensaje)
alexander = Humano(18)                # donde 18 se envia como parametro a edad y Humano() se esta guardando como plantilla en alexander(self)
print("tengo: ",alexander.edad)       # aqui manda a imprimir
alexander.hablar("hola gente")        # donde aqui mando a llamar a la funcion " hablar"
# tambien puedo crear mas clases
class Dotero(Humano):                 # donde agregamos"(Humano)" para que esta nueva clase reconosca a "Humano" y no cree otro def __init__(self,edad):, y ya no mande a llarmar con " alexander = Humano(18) " sino con " alexander = Dotero(18) ".
      def poscicion(self,juego):
          print(" jugare poscicion: ",juego)
class Acleta(Humano):
      def actividad(self,ejercicio):
          print(" hoy día hare unas/nos: ",ejercicio)

alexander = Dotero(18)
alexander.poscicion(5)                # aqui llamamos a la funcion "poscicion(5)" y el 5 es el parametro que envia a la funcion que se encuentra en lña clase " class Dotero(Humano):".

gustavo = Acleta(15)                  # aquí llamamos a otra clase 
gustavo.actividad("planchitas")
14--->>>
#instancear es crear objetos apartir de una clase.
15--->>>
# para validar int, o str, float, etc usaremos:

def vali():                                   # en este ejemplo validamos un entero o int.

    while True:                               # siempre estara activo porque nunca hay una contrdicion como un False y por eso tenemos el return para que cuando sea int devuelva eso y termine la funcion.
        palabra=input(" enter number: ")      # donde si lo ingresado es una "string o float" seguira hasta que sea un int y returne el valor "palabra=int(palabra).
        try:                                 
            palabra=int(palabra)              # try es para poder intentar o probar algo.
            return palabra                    # donde si la palabra puede ser int entonces returna el valor palabra.
        except ValueError:                    # el except es como caso contrario o excepto cuando y el ValuError es en caso que salga error en algo u en caso que el try no funcione hasta que salga el int.
            print(" el valor ingresado es incorrecto, digite entero.")
    
vali()

16----->>>>>
# para los textos y etc:

1. Convertir a mayúscula la primera letra
Método: capitalize()
Retorna: una copia de la cadena con la primera letra en mayúsculas.

>>> cadena = "bienvenido a mi aplicación" 
>>> print cadena.capitalize()
"Bienvenido a mi aplicación"

2. Convertir una cadena a minúsculas
Método: lower()

Retorna: una copia de la cadena en minúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.lower()
"hola mundo"

3. Convertir una cadena a mayúsculas
Método: upper()

Retorna: una copia de la cadena en mayúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.upper()
"HOLA MUNDO"

4. Convertir mayúsculas a minúsculas y viceversa
Método: swapcase()

Retorna: una copia de la cadena convertidas las mayúsculas en minúsculas y viceversa.

>>> cadena = "Hola Mundo" 
>>> print cadena.swapcase()
"hOLA mUNDO"

5. Convertir una cadena en Formato Título
Método: title()

Retorna: una copia de la cadena convertida.

>>> cadena = "hola mundo" 
>>> print cadena.title()
"Hola Mundo"

6. Centrar un texto
Método: center(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena centrada.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.center(50, "=") 
===========Bienvenido a mi aplicación============ 

>>> print cadena.center(50, " ") 
           Bienvenido a mi aplicación

7. Alinear texto a la izquierda
Método: ljust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la izquierda.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.ljust(50, "=")
Bienvenido a mi aplicación=======================

8. Alinear texto a la derecha
Método: rjust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la derecha.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.rjust(50, "=") 
=======================Bienvenido a mi aplicación

>>> print cadena.rjust(50, " ") 
                       Bienvenido a mi aplicación

9. Rellenar un texto anteponiendo ceros
Método: zfill(longitud)

Retorna: una copia de la cadena rellena con ceros a la izquierda hasta alcanzar la longitud final indicada.

>>> numero_factura = 1575 
>>> print str(numero_factura).zfill(12) 
000000001575

17--->>>>>
#el uso del get y set es mayormente que el get returna un atributo(return self.sueldo) y el set cambia el atributo(self.sueldo=self.gasto)
# para usar el privado y publico en clases( usaremos "self.__name" para privado y "self.name" publico) lanzada un error cuando enviemos a llamar al atributo privado.
class User:
    def __init__(self,username,password):
        self.username=username                                    #publico
        self.__password=self.__generar_password(password)         #privado y llamanda a la funcion "__generar_password"


    def __generar_password(self,password):
        return password

    def get_password(self):                                       #esta funcion nos devuelve la password, porque recuerda que solo se puede ver un atributo privado mediante las clases.
        return self.__password


alex=User('chaparito123','rufusbalto')
print(alex.username)

print(alex.get_password())                                        #llamamos a la funcion get_password().

18--->> ARCHIVOS : FILES : TXT :
#para almacenar datos en bloc de notas o notepad.
f=open("new.txt",'r')   # donde open("nombredelbloc.txt",'r') el 'r' es para leer el documento, 'w' para crear un nuevo documento y escribir, y 'a' para sobre escribir al final o como un append
f1=f.readlines()      # lee todas la lineas y readline() lee una solo linea
print(f1)   
a=input("enter something: ")
ga=a+"\n"             #para que se adapte a las lineas
if ga in f1:       
    print(True) 
else:
    print(False)
file=[1,2,3,4,5]
f=open("new.txt",'a')
f.write('file=% s'%file)   # seria normal un f.write("hola gente"), pero si es f.write("nombreparaagregar=%"%nombreparaagregar) es para q cual quier cosa sea numero, lista etc entre o sea agregado al bloc de notas.
f.close() # para cerrar el bloc
19--->>>
#para eliminar datos en un notepad usaremos el 'w' ya que crea uno nuevo.
f=open("archivo.txt",'w')
print(f.name)   # para ver el nombre del archivo
print(f.mode)   #para ver el modo del archiso si esta en 'a', 'w' o 'r'.
print(f.closed) #para ver si esta cerrado o abierto (True or False)
# para imprimir unas buenas lineas de un archivo txt debemos usar esto:
for linea in open("new.txt"):     #donde "linea" es el iterable, y "open("new.txt")" es lo que debe iterar que ya es un txt creado en la misma locacion del programa
    print(linea,end="")           #aqui imprime el iterable "linea" y en " end="" " es para que no de su salto de linea y siga linea por linea normal, ya que el los txt siempre al final de cada linea esta incluido un "\n".

// CON ESTO PUEDES LEER TODO EL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.read())
file.close()

//CON ESTO SACAS UNA LISTA DE TODO EL ARCHIVO CADA ELEMENTO DE LA LISTA ES UNA LINEA DEL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.readlines())
file.close()

// CON ESTO PUEDES VALIDAR CON EXCEPT EN CASO QUE NO SE ENCUENTRE EL ARCHIVO:

n = int(input('Introduce un número entero entre 1 y 10: '))
file_name = 'tabla-' + str(n) + '.txt'
try: 
    f = open(file_name, 'r')
except FileNotFoundError:
    print('No existe el fichero con la tabla del', n)
else:
    print(f.read())

//OTRA FORMA DE USAR EL OPEN :

with open("tabla_alex.txt","r") as file:
       print(file.readlines())
       file.close()

20--->>>
#1.list(map(funcion,parametros)) #bien para iterar colecciones.

def myfunc(a, b):
 return a + b
x = map(myfunc, ('apple', 'banana', 'cherry'), ('orange', 'lemon',
'pineapple'))
print (x)
print (list(x))


#2.list(filter(funcion,parametros)) #igual que map pero esta tiene una condiccion con elemtos filtrados

def multiple(numero): # Primero declaramos una función condicional
 if numero % 5 == 0: # Comprobamos si un numero es múltiple de cinco
 return True # Sólo devolvemos True si lo es
numeros = [2, 5, 10, 23, 50, 33]
filter(multiple, numeros)


#3.reduce(funcion, colección, inicial)

def add(a, b):
 return a + b
print(reduce(add, [1, 2, 3, 4]), 0) # 10


#4.funcion lambda como un def pero menos presiso

doblar = lambda num: num*2
doblar(2)


a=[1,2,3,4,5,6,7,8,9,10]
res=list(filter(lambda x:x%3==0, a))
print(res)

21--->> para crear interfaces graficas o GUI
#eval es un operador que me permite evaluar un signo en un string
from tkinter import Tk  

ventana =Tk()
ventana.title("hola")
ventana.mainloop()
#con esto nos saldra una pequeña ventana
22--->>>
#use break and continue, break rompe la iteracion de un for o while 
#Al aparecer un Continue en Python, este regresa al comienzo del bucle, 
#ignorando todos los estamentos que quedan en la iteración actual del 
#bucle e inicia la siguiente iteración. Queda más claro con un ejemplo:

for letra in "Python":
    if letra == "h":
        continue
    print ("Letra actual : " + letra)

# Primer ejemplo
var = 10
while var > 0:
    var = var -1
    if var == 5:
        continue
    print ("Valor actual de la variable : " + str(var))

>>>pantallla

Letra actual : P
Letra actual : y
Letra actual : t
Letra actual : o
Letra actual : n
Valor actual de la variable : 9
Valor actual de la variable : 8
Valor actual de la variable : 7
Valor actual de la variable : 6
Valor actual de la variable : 4
Valor actual de la variable : 3
Valor actual de la variable : 2
Valor actual de la variable : 1
Valor actual de la variable : 0

23--->>>

#use palabra.split()

>>> c = " Una cadena con espacios "
>>> c.split()
['Una', 'cadena', 'con', 'espacios']

x = ?blue,red,green?
x.split(?,?)
 
[?blue?, ?red?, ?green?]
>>>
 
>>> a,b,c = x.split(?,?)
 
>>> a
?blue?
 
>>> b 
?red?
 
>>> c
?green?

#use "que quieres que haya en los espacios(","or"@"or"$"or stuff ramdon)".join(el_conunto_a_unir)

>>> xs = ['aaa', 'bbb', 'cccc']
>>> " ".join(xs)
'aaa bbb cccc'
>>> ", ".join(xs)
'aaa, bbb, cccc'
>>> "@@".join(xs)
'aaa@@bbb@@cccc'
24-->>
para generar un password sin vita del usuario usamos:
import getpass
f=getpass.getpass(prompt="enter password: ")
25---->
# Ejercicio 1
# podremos comprimir asi d facil solo mira y con el print(f"que imprime todo lo q este dentro de la llave usando la f al inicio {mensaje_a_imprimir}")
def cantidad(a):
    facto=1
    for i in range(1,a+1):facto=facto*i
    print(f"the number permutations of {a} elements is: {facto}")
cantidad(int(input("enter number of elements: ")))
# tambien puedes comprimir un modulo 
# ejemplo:
--->> from math import factorial as f
26---->>>>
#f.seek(posicion en la que quieres empezar) lleva al puntero a la posicion dada
#f.tell() = imprime la posicion actual del puntero.
f=open("hola.txt",'r')  
f.seek(5)              #posicion dada "5"
cadena=f.read(5) 
print(cadena)
print(f.tell())       #imprime la poscion actual del puntero osea "5"

27-->> SQLITE :

#para establecar una coneccion con sqlite3 usaremos:
varible_a_guardar=sqlite3.connect("archivo_a_crear.db")
#establecemos un cursor
c=varible_a_guardar.cursor()
c.execute('''CREATE TABLE GAMES
             (NAMEGAME text, EDITION text, COMPANY text, VOL real, PRICE real)''')

c.execute("INSERT INTO GAMES VALUES ('INFINITY','ESPECIAL','AMAZON',3,149.99)")

conn.commit()
#"commnit()" guarda los cambios

ingrese=[('MINECRAFT','NORMALY','JAVA',40,49.99),
              ('DESTINY','PREMIUN','SONY',170,199.99)]
c.executemany("DELETE INTO GAMES VALUES (?,?,?,?,?)",ingrese)
#"executemany()" sirve para enviar varios parametros a guardar en sqlite3
conn.commit()

c.close()
28---->
para comentarios usaremos:
alf + 3 para volverlos a todos asi -->> ###print("hola")
y para retornarlos usaremos alf +4 --->> print("hola")

29--->
para añadir a un diccionario usaremos:
dic['alex']=18
para eliminar usaremos:
del dic['alex']
#para imprimir diccionarios con bucle for clave y valor:

vali=open("character.pickle",'rb')
g=pickle.load(vali)
for clave, valor in g.items():
    print(f"{clave} --> {valor}")
30--------------->>>>>>>>>>>>>>><
import sqlite3
conn=sqlite3.connect(":memory:") #en vez de :memory: puede ir el documento o base de datos nombre_del_documento.db
c=conn.cursor()
c.execute("CREATE TABLE shop(client text, product text, price real)")

c.execute("INSERT INTO shop VALUES('marco','milk',10.5)") #insetar o ingresar dados individualmente.
purchases=[("alex","bread",2.50),     
           ("jesudas","soda",5.50)]
c.executemany("INSERT INTO shop VALUES(?,?,?)",purchases) #ingresar mediante una lista o etc.
conn.commit() #guardado del proceso


c.execute("SELECT * FROM shop ORDER BY client") # para selecionar q imprimir
print(c.fetchone())#llama al primer registro
print(c.fetchall())#llama a todos los registros

conn.close()
###### para borrar una tabla se usa "DROP TABLE shop" y ALTER TABLE nombre_tabla DROP columna_a_eliminar
######para introducir una tabla extra se usa ALTER:
ALTER TABLE shop
ADD COLUMN nicks text

# tambien para cambiar d nombre

ALTER TABLE shop
RENAME TO mall
#####tambien para actualizar una tabla UPDATE
UPDATE comments
SET email = 'zyx@email.com'
WHERE name = 'Shivam Mamgain';

#el like
donde se usaria
WHERE name LIKE '%A%' #esto absorvera a el name que tenga una a, en caso contrario no lo contara.
#para ordernar ascendentemente o descendentemente. 
SELECT
   select_list
FROM
   table
ORDER BY
    column_1 ASC,
    column_2 DESC;
#####recuerda cuando vas a ingresar datos en un "bla_bla.execute" debe estar en [] o () para q entre ingresado anteriormente.
#### PARA IMPRIMIR LAS TABLAS USAR: c.execute("SELECT * FROM sqlite_master WHERE type = 'table' ")
##c.execute(f"ALTER TABLE {table} ADD COLUMN day text") para agregar columnas.

31----->
#para eliminar columnas usaremos esto:
c.execute("BEGIN TRANSACTION")
c.execute("CREATE TEMPORARY TABLE t_pasar (code,product,price,realprice)")
c.execute("INSERT INTO t_pasar SELECT code,product,price,realprice FROM shop")
c.execute("DROP TABLE shop")
c.execute("CREATE TABLE shop (code,product,price,realprice)")
c.execute("INSERT INTO shop SELECT code,product,price,realprice FROM t_pasar")
c.execute("DROP TABLE t_pasar")
con.commit()
con.close()
32----->>
##para usar más en letras o strings:
import string
usando los comandos q contiene string podremos sacar
todos los numeros, tolas las letras mayusculas o minuscula, cambiar a cada letra mayuscula en cada palabra al iniciar, etc.
33------>>>>
#forma para ingresar o printear algo:

a="gaaa gente 2123b"
b="---%"
c="watch movies"
m='my message is{}: {} and {}'.format(a,b,c)
print(m)



34 ------->>>> OPEN txt :

recuerda que cuano esta en una funcion un open es más efectivo a la hora de cambiar cosas al instante: ejemplo (bot_mirrow_future_XD) :

f = open("botspeak.txt",'w')
f.write("hola\nno lo sé tú dime\nsi eso\nperro lo tienes\n")
f.close()
def add(a):
    f = open("botspeak.txt",'a')
    f.write(a+"\n")
    
fat=open("botspeak.txt",'r')
while(1):
    speak=input(" you: ")
    add(speak)
    val=fat.readline()
    print(f"\n zorro:  {val}")
    if val=="adios\n":
        f = open("botspeak.txt",'w')
        f.close()
        break
    
fat.close()

35 ----------->>> USO DE ITERTOOLS :
import itertools
itertools.permutations(iterable,longitud)
---PERMUTATIONS : MODIFICA EL ORDEN DE LOS ELEMENTOS.(SÍ IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6,13], [2,13,6], [6,2,13], [6,13,2], [13,2,6], [13,6,2].

itertools.combinations(iterable,longitud)
---COMBINATIONS : COMBINA TODOS LOS ELEMENTOS, NO SE REPITEN CONJUNTOS.(NO IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6], [2,13], [6,13].

36 ------------------------->>> CLASES - ENCAPSULAMIENTO - HERENCIA - POLIMORFISMO :

CLASE : CUANDO CLASIFICAMOS UN OBJETO EJEMPLO : CUANDO VEMOS UN PERRO SABEMOS QUE ES UN PERRO ASI QUE DECIMOS ES UN PERRO O SEA LA CLASE PERRO SEA LA DEL CUALQUIER RAZA.

ENCAPSULAMIENTO : ES UN PRIVATE O CUANDO HACEMOS ELEMENTOS UNICOS DE ESTA CLASE Y NO PUEDEN SER TOCADOS POR OTRAS

HERENCIA : CUANDO ADQUIRIMOS TANTO LOS ATRIBUTOS Y METODOS DE LA CLASE ES ESTE EJEMPLO SE VE LA FUNCION "esta_vivo()".

POLIMORFISMO : CUANDO SE LLAMA A UN METODO O ATRIBUTO PERO CADA CLASE VARIA ES SU USO O LO QUE HARA EJEMPLO : TENEMOS LA FUNCION "COMER()" CADA CLASE HACE ALGO DIFERENTE.

EJEMPLO 1 : 

class Ser_vivo:   		// CLASE
    vivo = " be life"            //ATRIBUTO TIPO STRING O CADENA
    def __init__(self):
        pass
    def comer(self):              
        print("eating.")
        
class Persona(Ser_vivo):             	// HERENCIA
    def __init__(self):
        self.__name = "alex"
    def comer(self):                      // POLIMORFISMO
        print("eating sitdown.")
    def get_name(self):               	// USO DEL GET Y SET 
        return self.__name
    def set_name(self,dato):
        self.__name = dato

class Dog(Ser_vivo): 
    def __init__(self):
        pass
    def comer(self):
        print("eating in its glass.")
        
yo = Persona()     		// CREACION DE OBJETOS HIJAS DE LA CLASE "Ser_vivo".
mascota = Dog()

yo.comer()               	// POLIMORFISMO
print(yo.vivo)              	// HERENCIA
print(yo.get_name())
yo.set_name("alexander")        	// USO GET & SET
print("new name: ",yo.get_name()) 

mascota.comer()                	// POLIFORMISMO
print(mascota.vivo)            	// HERENCIA

36.1 -------- USO DEL SUPER().__INIT__ :  SUPER () . __INIT__ :

//LA FUNCION SUPER() PERMITE QUE EL ESTADO DE __INIT__ DE LA CLASE PADRE SE EJECUTE, SI NO SE PONE ESO SOLO SE EJECUTARA EL ESTADO DE LA CLASE LLAMADA O HIJA.

class clase1:                  //PADRE
    def __init__(self,name,age):
	   self.name = name
	   self.age = age
           print("hello i am class1")
class clase2(clase1):          //HIJA
       def __init__(self,name,age,color):          
              super().__init__(name,age)         //LLAMA AL ESTADO __INIT__() DE SU PADRE QUE ES "clase1"  Y ENVIA LOS PARAMETROS  DE SU CONTRUCTOR
              print("adios i am class2")
	      self.color = color

yo = clase2()

//RECUERDA QUE SOLO LLAMA A SU PADRE NO AL ABUELO, SI QUEREMOS LLAMAR AL ABUELO DEBEMOS HACER LO MISMO EN LA CLASE PADRE.

36.2 ---------------------->>> CLASSMETHOD : STATICMETHOD :

//CLASSMETHOD : puede usar las instancias de la clase (atributos, metodos).
//STATICMETHOD : no puede usar (atributos, metodos) de la clase, esta por si sola en la clase, como una funcion más.

class Poblacion:
       people  = 100     // ATRIBUTOS
       
       @classmethod 
       def quantity_of_people(cls):
              cls.decorador()
              return cls.people
       
       @classmethod
       def increase_quantity(cls):
              cls.people += 1
              
       @classmethod 
       def decorador(cls):           // METODOS
              print("resultado: ",end="")

print(Poblacion.quantity_of_people())  # resultado: 100
Poblacion.increase_quantity()
print(Poblacion.quantity_of_people())  # resultado: 101


class Math:              
       @staticmethod
       def pow(dato_1, dato_2):
              return pow(dato_1,dato_2)
       
       @staticmethod
       def factorial(dato):
              valor = 1
              for i in range(1,dato+1):
                     valor *= i
              return valor
                     
 
print(Math.pow(5,3))  # 125
print(Math.factorial(5)) # 120


37 ------------------------>>> USO DEL MAP :

MAP() : ITERA A CADA VALOR ENVIADO POR UNA FUNCION, PRIMERO VA LA FUNCION DESPUES EL ELEMENTO A ITERAR: (FUNCION, ITERACION(LIST,DIC,TUPLE,ETC)).

def grade(score):
    if score < 5:
        return 'SS'
    elif score < 7:
        return 'AP'
    elif score < 9:
        return 'NT'
    elif score < 10:
        return 'SB'
    else:
        return 'MH'

def apply_grade(scores):
    subjects = map(str.upper, scores.keys())
    grades = map(grade, scores.values())
    return dict(zip(subjects, grades))

print(apply_grade({'Matemáticas':6.5, 'Física':5, 'Química':3.4, 'Economía':8.2, 'Historia':9.7, 'Programación':10}))

38 ---------------->>>>>>  FILTER : USO DE FILTER :

//EXTRAE LOS ELEMENTOS QUE CUMPLAN EL REQUISITO DE LA FUNCIONEN CASO QUE SEAN VERDADEROS:
// O SEA SI EN LA LISTA EL PRIMERO ES TRUE Y LOS DEMAS FALSE ENTONCES RETORNA UNA LISTA CON EL ELEMENTO TRUE QUE ES EL PRIMERO.

>>> l = [5,10,73,25,52]
>>> print(list(filter(lambda n:n%5==0, l)))

SALIDA : [5, 10, 25]

39 ------------------->>>>  USO DE NUMPY : 

import numpy as np

arreglo = np.ones([4,5,3])
print("\nejemplo 1:\n",arreglo)

arreglo = np.arange(10)
print("\nejemplo 2:\n",arreglo)

arreglo = np.arange(5,10)
print("\nejemplo 3:\n",arreglo)

arreglo = np.arange(2,3,0.1)
print("\nejemplo 4:\n",arreglo)

arreglo = np.linspace(1.,4.,6)
print("\nejemplo 5:\n",arreglo)

arreglo = np.full((2,3), 5)
print("\nejemplo 6:\n",arreglo)

arreglo = np.eye(5)
print("\nejemplo 7:\n",arreglo)

arreglo = np.random.random((4,5))
print("\nejemplo 8:\n",arreglo)


#SALIDA :

ejemplo 1:
 [[[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]]

ejemplo 2:
 [0 1 2 3 4 5 6 7 8 9]

ejemplo 3:
 [5 6 7 8 9]

ejemplo 4:
 [2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9]

ejemplo 5:
 [1.  1.6 2.2 2.8 3.4 4. ]

ejemplo 6:
 [[5 5 5]
 [5 5 5]]

ejemplo 7:
 [[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]

ejemplo 8:
 [[0.54600486 0.73706976 0.85524028 0.89200753 0.25364417]
 [0.35571309 0.02002548 0.1081764  0.27915285 0.47872488]
 [0.49900018 0.03077063 0.57523311 0.59013634 0.80158343]
 [0.65366827 0.09053311 0.30189149 0.79028571 0.94809943]]

40 ------------------->>>