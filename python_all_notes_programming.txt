------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------" Python "------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

--------->> FUNCION MAIN : NAME MAIN AND FINISH SCRIPT:

//INCOVAR UNA FUNCION ANTES QUE TODAS LAS LINEAS DE COMANDO ANTERIORES A ESTA :

def principal():
	print("gatos")
print("hola")

if __name__=="__main__":
	principal()
	print("felinos")

SALIDA ::

gatos
felinos
hola

// task kill

import sys
try:
	a = input()
except:
	sys.exit(1) # parameter 1 for errors, exit or finish script

sys.exit(0)  # equals to sys.exit(), 0 is by default, finish script
	
	
---------->>> DICCIONARIO MULTIPLE :

dic_account={"a":{1:"a",2:"ADMINISTRADOR",3:"Todo el mundo"}}

f ={'alex':{1:123,2:"alexander",3:"peru"}}
f['alex'][1]=222
print(f['alex'][1])

def go_back():
	if(c_user.get() not in dic_account):
		dic_account[c_user.get()]={}
		dic_account[c_user.get()][1] = c_pass.get()
		dic_account[c_user.get()][2] = c_fullname.get()
		dic_account[c_user.get()][3] = c_var_pais.get()

 -- ELIMINACION DE ELEMENTOS EN UN DICCIONARIO :

listin = {'Juan':123456789, 'Pedro':987654321,"Luis":123456789}
print(listin)

listin.pop("Pedro"," ")      // PRIMERA FORMA DE ELEMINAR (LLAVE O KEY DEL DICCIONARIO, VALORO VALUE).
print(listin)
			     //USO DEL " DEL " ELIMINAR
del(listin["Luis"])         //SEGUNDA FORMA : SOLO SE ENVIA EL DICCIONARIO Y DENTRO LA KEY O LLAVE.
print(listin)

listin.clear() 		// PARA ELIMINAR, vaciar, TODO EL DICCIONARIO Y VOLVERLO ASI "{}".

listin.items()   	// TODO EL DICCIONARIO CON KEYS Y VALUES :

listin.keys() 	// RETORNA TODAS LAS LLAVES O CLAVES EN ESTE DICCIONARIO DEVOLVERIA TODOS LOS NOMBRES("Juan","Pedro","Luis").

listin.values()  //RETORNA TODOS LOS VALORES AQUI SERIAN(LOS NUMEROS TELEFONICOS).

listin.get("Luis","no existe este valor en el diccionario")    //si se encuentra luis en este diccionario entonces retorna key & value, caso contrario imprimer la cadena del segundo parametro.

print("Pedro" in listin)     //COMO LOS VALORES TIPICOS TRUE Y FALSE.

 -- MERGE:

a = {'a':1, 'b':2}
b ={'c':3, 'd':4}

c = {*a,*b}   # {'c', 'a', 'b', 'd'}

c = {**a,**b}  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = a.copy()
c.update(b)   # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = a | b  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = dict(a.items() | b.items())  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

-- tours with dictionarys:

a = ['a','b','c','d']
b = [1,2,3,4]

dictionary = {value:b[index]  for index, value in enumerate(a)} 
# output:{'a': 1, 'b': 2, 'c': 3, 'd': 4}

---------------------------->>> PARA QUE FUNCION EL INT PRIMARY KEY AUTOINCREMENT :

("create table empleados(id integer primary key autoincrement,name text,salario float,bono text)")

alex.insert_data("insert into empleados (name,salario,bono) values(?,?,?)",lista_datos)  //el id se aumentara solo

---------------NUEVO -----> PICKLE USE: 

import pickle

dic ={1:'alex',2:'carpio',3:'mamani'}
ga = open("todo.pickle",'wb')
pickle.dump(dic,ga)
ga = open("todo.pickle",'rb')
dic1 = pickle.load(ga)
print(dic1[2])
ga.close()


------------------->>> BORRA TODOS LOS ESPACIOS DE UNA CADENA : ESPACIO :

palabra = '   HOLA   '
palabra.strip(" ") //HOLA

------------------->>> ASIGNACION MULTIPLE :

cadena = "a-b-c"
a, b, c = cadena.split("-")
print(a)
print(b)
print(c)

cadena = ["1","2","3"]
a, b, c = map(int, cadena) # change of string to integer
print(a)
print(b)
print(c)

# SALIDA : 

a
b
c

1 ----------> 

print("para que lo imprimido sea de forma lateral: ",variable,end=" ")
y usar " pass " es como un comentario pero no ignorado, así que no pasa nada solo es como para probar algo o ya sabes.

# usar ";" al final es como saltar en el script, e.g:

a = 3; b= 5; print(a+b)

# lo anterior es igual a decir:

a = 3
b = 5
print(a+b)

2 ---------> 
#en listas:
lista.append(añade_elemento) # para añadir elementos a las listas.
lista.extend([x,y,z]) # para exterder a la lista con elementos puestos.
lista.insert(poscicion,valor) # para colocar un elemento " y "en la posicion "x".
lista.clear() # para eliminar todos los elementos de la lista.
lista.pop(posicion_a_eliminar) # para eliminar cierto elemto en la poscicion "x".
lista.remove(valor_a_eliminar)
lista.index(palabra_a_buscar) #te devuelve la poscicion.
lista.sort() # ordena la lista.
# para hacer las famosas matrices primero crearemos " matriz " que sera la principal, luego en los " for "  agregaremos mas listas " matriz1 "para que estas sean rows o filas
# ejemplo:

matriz=[]

r=int(input(" Enter quantity of rows: "))
c=int(input(" Enter quantity of columns: "))

for i in range(r):
    matriz1=[]
    for f in range(c):
        a=int(input(" Enter number in position ["+str(i)+"]["+str(f)+"]: "))
        matriz1.append(a)   # aqui agregamos elementos "a" ingresados por teclado a la matriz secundaria o las filas.
    matriz.append(matriz1)  # aqui agregamos la sublista a la lista principal.
# conejos: cuando se traten de coleciones(listas, tuplas, conjuntos, diccionarios y no sé que más) usaremos cada herramienta posible para definir estas segun sean sus caracteristicas principales
# osea si queremos ordenar algo, agregar, eliminar, usaremos listas(list(x)), si queremos solo saber que elementos hay sin repetirce usaremos "set(x)", si queremos
# que tengan claves con valores usaremos "dict(zip(lista1,lista2))" donde veremos una mejor explicación en el punto 8, y "set" para convertirlos en conjuntos, tambien me olvidaba de las tuplas
# que son "tuple(x)"que como que las convierten a constantes o algo así.

3-->>

#para verificar si una palabra esta en una cadena se debe usar
palabra.count('hi')------average es promedio
#donde palabra es la cadena, .count es el metodo o method, y lo 1 va ('hi') es la palabra q queremos verificar si esta en la cadena.
#el  "lista.count(2) tambien sirve para listas y ver cuantas vesces esta ese numero en la lista, tipo contador.
# ejemplo normalico:
list=[1,1,2,3,1,5,5,5,6,7,5]
for i in range(len(list)):
    cont=list.count(list[i])
# veremos que sacara la cantidad de vesces que hay un mismo numero en la lista
# ejem  " cont=list.count(1) " donde con seria " cont=3 ".
# ejem  " cont=list.count(7) " donde con seria " cont=1 ".
# ejem  " cont=list.count(5) " donde con seria " cont=4 ".
# Este es un ejemplo avanzado:
list=[1,1,2,3,1,5,5,5,6,7,5]
max(set(list), key=list.count)
print("the mode is: ",max(set(list), key=list.count))
#LISTA COMPRIMIDA CON FOR AND IF

f=[ i for i in [1,2,3,4,5,6,7,8,9,10] if i % 2==1]   #extrae los numeros primos de 1 a 10.
print(f)  

# o con un filter y lambda:
                       
print(list(filter(lambda x:x%2==1,[1,2,3,4,5,6,7,8,9,10])))

3.5 ----------->> lambda examples and list.sort(key) - sorted(key):

a = 3
function = lambda x: x*10

print(function(a))

a = 3
b = 2
function = lambda x,y: x+y

print(function(a,b)) # 5


names = ['Ruben F', 'Pedro B','Luisa C','Julieta A']
sorted_names = sorted(names, key = lambda name: name[-1])
names.sort(key = lambda name: name[-1])

print(sorted_names)
print(names)

# Output:

#['Julieta A', 'Pedro B', 'Luisa C', 'Ruben F']
#['Julieta A', 'Pedro B', 'Luisa C', 'Ruben F']

4---->>

# para genera numeros aleatorios se debe usar
import random
val=random.randint(minimo,maximo)
# en minimo y maximo van los limites

5--->>
# para ordenar una lista se usa el comando "lista.sort()" y para invertirla o verla al revez seria "lista.sort(reverse=True)".
# tambien se puede usar "lista.reverse()" para voltear la lista perono ordenarla
6--->>
# para instalar algo se podria usar "pip install Howdoi " como ejemplo.
7--->>
# usar funtion max(algo) or min(algo) or sum(algo) de una lista o colecciones para hallar el maximo, minimo, y suma total.
8--->>
# usar "zip", esta sirve para unir listas, o colecciones para transformarlas en un dicionario con sus respectivas llaves o keys y valores o values
ejemplo:
list1=[]
list2=[]
dates1=dict(zip(list1,list2))
# donde "list1" es igual a "keys"
# y "list2" es igual a "values"
9--->>
# el "set()" sirve para convertir una lista,tupla,etc a un conjunto
# donde lo más relevante de un conjunto es no repetir ningun elemento
# ejemplo:
list1=[1,1,1,2,3,3,4,5,5,7]
# pero con set(list1) o sea
list2=set(list1)
print(list2)
[1,2,3,4,5,7]
10--->>
# para hacer potencias y raices importamos la libreria math "import math".
import math
print(math.pow(x,y))   # donde " x " es el numero y " y " es a cuanto queremos elevarlo.
print(math.sqrt(x))    # donde podremos sacarle raices cuadradas, pero si queires cubicas usemos:
print(round(x**(1/3))) # asi serian una raiz cubica, obvio que hay muchas más formas pero pense si podia hacer eso.
print(x**float(1/3))   # tambien encontre esta en internet y creo que tendria más sentido, y entre 2, 4, 5, etc.

11--->>
                              # para un ejecutable usaremos el " import time ".
import time
time.sleep(3)                 # donde "time.sleep(x) " es la funcion principal y "x" cuantos segundos de retraso queremos para finalizar algo o el programa.

# ejemplo cronometro : chronometer :

import time

date = int(input('enter minutes: ')) * 60

while date != 0:
        minutes = date // 60
        seconds = date % 60
        
        timer = "{:02d}:{:02d}".format(minutes, seconds)
        print(timer,end='\r')
        
        time.sleep(1)
        date -= 1
        
print('\r> FINISH TIME.')

# convert number to time:

def number_to_time(number):
        hours = number // 3600
        number = number % 3600
        minutes = number// 60
        seconds = number % 60
        return "{:02d}:{:02d}:{:02d}".format(hours,minutes,seconds)

print(number_to_time(125))

12--->
                              # para crear modulos(funciones), debemos crear primero un .py para que cuando lo llamemos sea asi
import modulos_creados 
                              # despues llamamos a la funcion dentro de ese modulo
modulos_creados.suma_total(lista1)
                              # para no poner o escribir el indice del import usaremos
from modulos_creados import * 
                              # o solo 
from modulos_creados import suma_total 
                              # para algo especifico
                              # recuerda el modulo y el codigo o programa que este generando deben estar guardados en el mismo lugar 
13-->>

# para " CLASES Y OBJETOS " o para acostumbrarce " CLASS AND OBJECTS " ejemplos:

class Humano:
     def __init__(self,edad):
         self.edad=edad     # donde self viene a reflejar como un objeto a ingresar como el input ya veran más abajo y edad y self viene a ser como parametro y etc tú te entiendes.
         print(" hola esta es una clase")
     def hablar(self,mensaje):
         print(mensaje)
alexander = Humano(18)                # donde 18 se envia como parametro a edad y Humano() se esta guardando como plantilla en alexander(self)
print("tengo: ",alexander.edad)       # aqui manda a imprimir
alexander.hablar("hola gente")        # donde aqui mando a llamar a la funcion " hablar"
# tambien puedo crear mas clases
class Dotero(Humano):                 # donde agregamos"(Humano)" para que esta nueva clase reconosca a "Humano" y no cree otro def __init__(self,edad):, y ya no mande a llarmar con " alexander = Humano(18) " sino con " alexander = Dotero(18) ".
      def poscicion(self,juego):
          print(" jugare poscicion: ",juego)
class Acleta(Humano):
      def actividad(self,ejercicio):
          print(" hoy día hare unas/nos: ",ejercicio)

alexander = Dotero(18)
alexander.poscicion(5)                # aqui llamamos a la funcion "poscicion(5)" y el 5 es el parametro que envia a la funcion que se encuentra en lña clase " class Dotero(Humano):".

gustavo = Acleta(15)                  # aquí llamamos a otra clase 
gustavo.actividad("planchitas")

14--->>>

#instancear es crear objetos apartir de una clase.

15--->>>

# para validar int, o str, float, etc usaremos:

def vali():                                   # en este ejemplo validamos un entero o int.

    while True:                               # siempre estara activo porque nunca hay una contrdicion como un False y por eso tenemos el return para que cuando sea int devuelva eso y termine la funcion.
        palabra=input(" enter number: ")      # donde si lo ingresado es una "string o float" seguira hasta que sea un int y returne el valor "palabra=int(palabra).
        try:                                 
            palabra=int(palabra)              # try es para poder intentar o probar algo.
            return palabra                    # donde si la palabra puede ser int entonces returna el valor palabra.
        except ValueError:                    # el except es como caso contrario o excepto cuando y el ValuError es en caso que salga error en algo u en caso que el try no funcione hasta que salga el int.
            print(" el valor ingresado es incorrecto, digite entero.")
    
vali()

16----->>>>>

# para los textos y etc:

1. Convertir a mayúscula la primera letra
Método: capitalize()
Retorna: una copia de la cadena con la primera letra en mayúsculas.

>>> cadena = "bienvenido a mi aplicación" 
>>> print cadena.capitalize()
"Bienvenido a mi aplicación"

2. Convertir una cadena a minúsculas
Método: lower()

Retorna: una copia de la cadena en minúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.lower()
"hola mundo"

3. Convertir una cadena a mayúsculas
Método: upper()

Retorna: una copia de la cadena en mayúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.upper()
"HOLA MUNDO"

4. Convertir mayúsculas a minúsculas y viceversa
Método: swapcase()

Retorna: una copia de la cadena convertidas las mayúsculas en minúsculas y viceversa.

>>> cadena = "Hola Mundo" 
>>> print cadena.swapcase()
"hOLA mUNDO"

5. Convertir una cadena en Formato Título
Método: title()

Retorna: una copia de la cadena convertida.

>>> cadena = "hola mundo" 
>>> print cadena.title()
"Hola Mundo"

6. Centrar un texto
Método: center(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena centrada.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.center(50, "=") 
===========Bienvenido a mi aplicación============ 

>>> print cadena.center(50, " ") 
           Bienvenido a mi aplicación

7. Alinear texto a la izquierda
Método: ljust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la izquierda.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.ljust(50, "=")
Bienvenido a mi aplicación=======================

8. Alinear texto a la derecha
Método: rjust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la derecha.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.rjust(50, "=") 
=======================Bienvenido a mi aplicación

>>> print cadena.rjust(50, " ") 
                       Bienvenido a mi aplicación

9. Rellenar un texto anteponiendo ceros
Método: zfill(longitud)

Retorna: una copia de la cadena rellena con ceros a la izquierda hasta alcanzar la longitud final indicada.

>>> numero_factura = 1575 
>>> print str(numero_factura).zfill(12) 
000000001575

17--->>>>> class : private : methods and attributes :

# private elements could be called inside the class, but not outside the class.

class User:
    def __init__(self,username,password):
        self.username = username           # public attibute
        self.__password = password         # private attibute


    def hello(self):                         # public function
        return f' hello, im {self.username}.'

    def __show_password(self):               # private function
        return f' my password is: {self.__password}.'


im = User('python','cplusplus123')

print(im.username)  # python

print(im.__show_password())    # AttributeError: 'User' object has no attribute '__show_password'


18--->> ARCHIVOS : FILES : TXT :

#para almacenar datos en bloc de notas o notepad.
f=open("new.txt",'r')   # donde open("nombredelbloc.txt",'r') el 'r' es para leer el documento, 'w' para crear un nuevo documento y escribir, y 'a' para sobre escribir al final o como un append
f1=f.readlines()      # lee todas la lineas y readline() lee una solo linea
print(f1)   
a=input("enter something: ")
ga=a+"\n"             #para que se adapte a las lineas
if ga in f1:       
    print(True) 
else:
    print(False)
file=[1,2,3,4,5]
f=open("new.txt",'a')
f.write('file=% s'%file)   # seria normal un f.write("hola gente"), pero si es f.write("nombreparaagregar=%"%nombreparaagregar) es para q cual quier cosa sea numero, lista etc entre o sea agregado al bloc de notas.
f.close() # para cerrar el bloc
19--->>>
#para eliminar datos en un notepad usaremos el 'w' ya que crea uno nuevo.
f=open("archivo.txt",'w')
print(f.name)   # para ver el nombre del archivo
print(f.mode)   #para ver el modo del archiso si esta en 'a', 'w' o 'r'.
print(f.closed) #para ver si esta cerrado o abierto (True or False)
# para imprimir unas buenas lineas de un archivo txt debemos usar esto:
for linea in open("new.txt"):     #donde "linea" es el iterable, y "open("new.txt")" es lo que debe iterar que ya es un txt creado en la misma locacion del programa
    print(linea,end="")           #aqui imprime el iterable "linea" y en " end="" " es para que no de su salto de linea y siga linea por linea normal, ya que el los txt siempre al final de cada linea esta incluido un "\n".

// CON ESTO PUEDES LEER TODO EL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.read())
file.close()

//CON ESTO SACAS UNA LISTA DE TODO EL ARCHIVO CADA ELEMENTO DE LA LISTA ES UNA LINEA DEL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.readlines())
file.close()

// CON ESTO PUEDES VALIDAR CON EXCEPT EN CASO QUE NO SE ENCUENTRE EL ARCHIVO:

n = int(input('Introduce un número entero entre 1 y 10: '))
file_name = 'tabla-' + str(n) + '.txt'
try: 
    f = open(file_name, 'r')
except FileNotFoundError:
    print('No existe el fichero con la tabla del', n)
else:
    print(f.read())

//OTRA FORMA DE USAR EL OPEN :

with open("tabla_alex.txt","r") as file:
       print(file.readlines())
       file.close()

// UnicodeDecodeError ERROR !!!!

file = open('review.txt','r',encoding='utf-8')
#text = file.read()
#text = file.readlines()
#text = file.readline()
#print(text)


20--->>> USE map : filter : reduce :

### 1.list(map(funcion,parametros)) # bien para iterar colecciones.

# example 1:

def myfunc(a, b):
        return a + b

x = list(map(myfunc, ('apple', 'banana', 'cherry'), ('orange', 'lemon', 'pineapple')))
print (x)

# output: ['appleorange', 'bananalemon', 'cherrypineapple']


# example 2:

def number_to_time(number):
        hours = number // 3600
        number = number % 3600
        minutes = number// 60
        seconds = number % 60
        return "{:02d}:{:02d}:{:02d}".format(hours,minutes,seconds)

numbers = [125, 7243, 72, 991, 11207, 6]
time = list(map(number_to_time, numbers))
print(time)

# output: ['00:02:05', '02:00:43', '00:01:12', '00:16:31', '03:06:47', '00:00:06']


### 2.list(filter(funcion,parametros)) #igual que map pero esta tiene una condiccion con elementos filtrados


# example 1:

def multiplo_5(numero):
        if numero % 5 == 0:
                return True
        
numeros = [2, 5, 10, 23, 50, 33]

x = list(filter(multiplo_5, numeros))
print(x)

# output: [5, 10, 50]

# example 2:

names = ['Carlos', 'David', 'Alexander', 'Fernando', 'Amelia']

request = list(filter(lambda x: x[0].lower() == 'a', names))
print(request)

# output: ['Alexander', 'Amelia']


### 3. reduce(funcion, colección, inicial)

# example 1:

from functools import reduce
def add(a, b):
        return a + b

print(reduce(add, [1, 2, 3, 4, 5]))

output : 15

# example 2:

from functools import reduce
def concatenate(a, b):
        return a + b

print(reduce(concatenate, ['a', 'b', 'c', 'd', 'e']))

# output: 'abcde'


### 4.funcion lambda como un def pero menos especifico

# example 1:

doblar = lambda num: num*2
print(doblar(2)) # 2**2 = 4

# example 2:

a=[1,2,3,4,5,6,7,8,9,10]
res=list(filter(lambda x: x % 3 == 0, a))
print(res)

# output: [3, 6, 9]

21--->> para crear interfaces graficas o GUI

#eval es un operador que me permite evaluar un signo en un string
from tkinter import Tk  

ventana =Tk()
ventana.title("hola")
ventana.mainloop()
#con esto nos saldra una pequeña ventana

22--->>>
#use break and continue, break rompe la iteracion de un for o while 
#Al aparecer un Continue en Python, este regresa al comienzo del bucle, 
#ignorando todos los estamentos que quedan en la iteración actual del 
#bucle e inicia la siguiente iteración. Queda más claro con un ejemplo:

for letra in "Python":
    if letra == "h":
        continue
    print ("Letra actual : " + letra)

# Primer ejemplo
var = 10
while var > 0:
    var = var -1
    if var == 5:
        continue
    print ("Valor actual de la variable : " + str(var))

>>>pantallla

Letra actual : P
Letra actual : y
Letra actual : t
Letra actual : o
Letra actual : n
Valor actual de la variable : 9
Valor actual de la variable : 8
Valor actual de la variable : 7
Valor actual de la variable : 6
Valor actual de la variable : 4
Valor actual de la variable : 3
Valor actual de la variable : 2
Valor actual de la variable : 1
Valor actual de la variable : 0

23--->>>

#use palabra.split()

>>> c = " Una cadena con espacios "
>>> c.split()
['Una', 'cadena', 'con', 'espacios']

x = ?blue,red,green?
x.split(?,?)
 
[?blue?, ?red?, ?green?]
>>>
 
>>> a,b,c = x.split(?,?)
 
>>> a
?blue?
 
>>> b 
?red?
 
>>> c
?green?

#use "que quieres que haya en los espacios(","or"@"or"$"or stuff ramdon)".join(el_conunto_a_unir)

>>> xs = ['aaa', 'bbb', 'cccc']
>>> " ".join(xs)
'aaa bbb cccc'
>>> ", ".join(xs)
'aaa, bbb, cccc'
>>> "@@".join(xs)
'aaa@@bbb@@cccc'

## Si es una cadena pegada e.g: 'abcd', para separarla simplemente usaremos:

characters = list('0123456789abcdefghijklmnopqrstuvwxyz')

# Salida: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

24-->>
para generar un password sin vita del usuario usamos:
import getpass
f=getpass.getpass(prompt="enter password: ")
25---->
# Ejercicio 1
# podremos comprimir asi d facil solo mira y con el print(f"que imprime todo lo q este dentro de la llave usando la f al inicio {mensaje_a_imprimir}")
def cantidad(a):
    facto=1
    for i in range(1,a+1):facto=facto*i
    print(f"the number permutations of {a} elements is: {facto}")
cantidad(int(input("enter number of elements: ")))
# tambien puedes comprimir un modulo 
# ejemplo:
--->> from math import factorial as f
26---->>>>
#f.seek(posicion en la que quieres empezar) lleva al puntero a la posicion dada
#f.tell() = imprime la posicion actual del puntero.
f=open("hola.txt",'r')  
f.seek(5)              #posicion dada "5"
cadena=f.read(5) 
print(cadena)
print(f.tell())       #imprime la poscion actual del puntero osea "5"

27-->> SQLITE :

#para establecar una coneccion con sqlite3 usaremos:
varible_a_guardar=sqlite3.connect("archivo_a_crear.db")
#establecemos un cursor
c=varible_a_guardar.cursor()
c.execute('''CREATE TABLE GAMES
             (NAMEGAME text, EDITION text, COMPANY text, VOL real, PRICE real)''')

c.execute("INSERT INTO GAMES VALUES ('INFINITY','ESPECIAL','AMAZON',3,149.99)")

conn.commit()
#"commnit()" guarda los cambios

ingrese=[('MINECRAFT','NORMALY','JAVA',40,49.99),
              ('DESTINY','PREMIUN','SONY',170,199.99)]
c.executemany("DELETE INTO GAMES VALUES (?,?,?,?,?)",ingrese)
#"executemany()" sirve para enviar varios parametros a guardar en sqlite3
conn.commit()

c.close()
28---->
para comentarios usaremos:
alf + 3 para volverlos a todos asi -->> ###print("hola")
y para retornarlos usaremos alf +4 --->> print("hola")

29--->
para añadir a un diccionario usaremos:
dic['alex']=18
para eliminar usaremos:
del dic['alex']
#para imprimir diccionarios con bucle for clave y valor:

vali=open("character.pickle",'rb')
g=pickle.load(vali)
for clave, valor in g.items():
    print(f"{clave} --> {valor}")
30--------------->>>>>>>>>>>>>>><
import sqlite3
conn=sqlite3.connect(":memory:") #en vez de :memory: puede ir el documento o base de datos nombre_del_documento.db
c=conn.cursor()
c.execute("CREATE TABLE shop(client text, product text, price real)")

c.execute("INSERT INTO shop VALUES('marco','milk',10.5)") #insetar o ingresar dados individualmente.
purchases=[("alex","bread",2.50),     
           ("jesudas","soda",5.50)]
c.executemany("INSERT INTO shop VALUES(?,?,?)",purchases) #ingresar mediante una lista o etc.
conn.commit() #guardado del proceso


c.execute("SELECT * FROM shop ORDER BY client") # para selecionar q imprimir
print(c.fetchone())#llama al primer registro
print(c.fetchall())#llama a todos los registros

conn.close()
###### para borrar una tabla se usa "DROP TABLE shop" y ALTER TABLE nombre_tabla DROP columna_a_eliminar
######para introducir una tabla extra se usa ALTER:
ALTER TABLE shop
ADD COLUMN nicks text

# tambien para cambiar d nombre

ALTER TABLE shop
RENAME TO mall
#####tambien para actualizar una tabla UPDATE
UPDATE comments
SET email = 'zyx@email.com'
WHERE name = 'Shivam Mamgain';

#el like
donde se usaria
WHERE name LIKE '%A%' #esto absorvera a el name que tenga una a, en caso contrario no lo contara.
#para ordernar ascendentemente o descendentemente. 
SELECT
   select_list
FROM
   table
ORDER BY
    column_1 ASC,
    column_2 DESC;
#####recuerda cuando vas a ingresar datos en un "bla_bla.execute" debe estar en [] o () para q entre ingresado anteriormente.
#### PARA IMPRIMIR LAS TABLAS USAR: c.execute("SELECT * FROM sqlite_master WHERE type = 'table' ")
##c.execute(f"ALTER TABLE {table} ADD COLUMN day text") para agregar columnas.

31----->
#para eliminar columnas usaremos esto:
c.execute("BEGIN TRANSACTION")
c.execute("CREATE TEMPORARY TABLE t_pasar (code,product,price,realprice)")
c.execute("INSERT INTO t_pasar SELECT code,product,price,realprice FROM shop")
c.execute("DROP TABLE shop")
c.execute("CREATE TABLE shop (code,product,price,realprice)")
c.execute("INSERT INTO shop SELECT code,product,price,realprice FROM t_pasar")
c.execute("DROP TABLE t_pasar")
con.commit()
con.close()
32----->>
##para usar más en letras o strings:
import string
usando los comandos q contiene string podremos sacar
todos los numeros, tolas las letras mayusculas o minuscula, cambiar a cada letra mayuscula en cada palabra al iniciar, etc.
33------>>>>
#forma para ingresar o printear algo:

a="gaaa gente 2123b"
b="---%"
c="watch movies"
m='my message is{}: {} and {}'.format(a,b,c)
print(m)



34 ------->>>> OPEN txt :

recuerda que cuano esta en una funcion un open es más efectivo a la hora de cambiar cosas al instante: ejemplo (bot_mirrow_future_XD) :

f = open("botspeak.txt",'w')
f.write("hola\nno lo sé tú dime\nsi eso\nperro lo tienes\n")
f.close()
def add(a):
    f = open("botspeak.txt",'a')
    f.write(a+"\n")
    
fat=open("botspeak.txt",'r')
while(1):
    speak=input(" you: ")
    add(speak)
    val=fat.readline()
    print(f"\n zorro:  {val}")
    if val=="adios\n":
        f = open("botspeak.txt",'w')
        f.close()
        break
    
fat.close()

35 ----------->>> USO DE ITERTOOLS :
import itertools

---VARIACIONES - PERMUTACIONES : MODIFICA EL ORDEN DE LOS ELEMENTOS.(SÍ IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6,13], [2,13,6], [6,2,13], [6,13,2], [13,2,6], [13,6,2].
itertools.permutations(iterable,longitud)

--VARIACIONES - PERMUTACIONES CON REPETICIONES:
itertools.product([1,2,3,4], repeat=2)

---COMBINATIONS : COMBINA TODOS LOS ELEMENTOS, NO SE REPITEN CONJUNTOS.(NO IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6], [2,13], [6,13].
itertools.combinations(iterable,longitud)

--COMBINACIONES CON REPETICIONES:
itertools.combinations_with_replacement([1, 2, 3, 4, 5, 6], 2)

36 ------------------------->>> CLASES - ENCAPSULAMIENTO - HERENCIA - POLIMORFISMO :


CLASE : CUANDO CLASIFICAMOS UN OBJETO EJEMPLO : CUANDO VEMOS UN PERRO SABEMOS QUE ES UN PERRO ASI QUE DECIMOS ES UN PERRO O SEA LA CLASE PERRO SEA LA DEL CUALQUIER RAZA.
// EN GENERAL UNA CLASE ES COMO UN PLANO.

ENCAPSULAMIENTO : ES UN PRIVATE O CUANDO HACEMOS ELEMENTOS UNICOS DE ESTA CLASE Y NO PUEDEN SER TOCADOS POR OTRAS

HERENCIA : CUANDO ADQUIRIMOS TANTO LOS ATRIBUTOS Y METODOS DE LA CLASE ES ESTE EJEMPLO SE VE LA FUNCION "esta_vivo()".

POLIMORFISMO : CUANDO SE LLAMA A UN METODO O ATRIBUTO PERO CADA CLASE VARIA ES SU USO O LO QUE HARA EJEMPLO : TENEMOS LA FUNCION "COMER()" CADA CLASE HACE ALGO DIFERENTE.

EJEMPLO 1 : 

class Ser_vivo:   		// CLASE
    vivo = " be life"            //ATRIBUTO TIPO STRING O CADENA
    def __init__(self):
        pass
    def comer(self):              
        print("eating.")
        
class Persona(Ser_vivo):             	// HERENCIA
    def __init__(self):
        self.__name = "alex"
    def comer(self):                      // POLIMORFISMO
        print("eating sitdown.")
    def get_name(self):               	// USO DEL GET Y SET 
        return self.__name
    def set_name(self,dato):
        self.__name = dato

class Dog(Ser_vivo): 
    def __init__(self):
        pass
    def comer(self):
        print("eating in its glass.")
        
yo = Persona()     		// CREACION DE OBJETOS HIJAS DE LA CLASE "Ser_vivo".
mascota = Dog()

yo.comer()               	// POLIMORFISMO
print(yo.vivo)              	// HERENCIA
print(yo.get_name())
yo.set_name("alexander")        	// USO GET & SET
print("new name: ",yo.get_name()) 

mascota.comer()                	// POLIFORMISMO
print(mascota.vivo)            	// HERENCIA

36.1 -------- USO DEL SUPER().__INIT__ :  SUPER () . __INIT__ :

//LA FUNCION SUPER() PERMITE QUE EL ESTADO DE __INIT__ DE LA CLASE PADRE SE EJECUTE, SI NO SE PONE ESO SOLO SE EJECUTARA EL ESTADO DE LA CLASE LLAMADA O HIJA.

class clase1:                  //PADRE
    def __init__(self,name,age):
	   self.name = name
	   self.age = age
           print("hello i am class1")
class clase2(clase1):          //HIJA
       def __init__(self,name,age,color):          
              super().__init__(name,age)         //LLAMA AL ESTADO __INIT__() DE SU PADRE QUE ES "clase1"  Y ENVIA LOS PARAMETROS  DE SU CONTRUCTOR
              print("adios i am class2")
	      self.color = color

yo = clase2()

//RECUERDA QUE SOLO LLAMA A SU PADRE NO AL ABUELO, SI QUEREMOS LLAMAR AL ABUELO DEBEMOS HACER LO MISMO EN LA CLASE PADRE.

36.2 ---------------------->>> CLASSMETHOD : STATICMETHOD : PROPERTY : ATTRIBUT.SETTER

//CLASSMETHOD : puede usar las instancias de la clase (atributos, metodos).
//STATICMETHOD : no puede usar (atributos, metodos) de la clase, esta por si sola en la clase, como una funcion más.

class Poblacion:
       people  = 100     // ATRIBUTOS
       
       @class 
       def quantity_of_people(cls):
              cls.decorador()
              return cls.people
       
       @classmethod
       def increase_quantity(cls):
              cls.people += 1
              
       @classmethod 
       def decorador(cls):           // METODOS
              print("resultado: ",end="")

print(Poblacion.quantity_of_people())  # resultado: 100
Poblacion.increase_quantity()
print(Poblacion.quantity_of_people())  # resultado: 101


class Math:              
       @staticmethod
       def pow(dato_1, dato_2):
              return pow(dato_1,dato_2)
       
       @staticmethod
       def factorial(dato):
              valor = 1
              for i in range(1,dato+1):
                     valor *= i
              return valor
                     
 
print(Math.pow(5,3))  # 125
print(Math.factorial(5)) # 120


## gets and sets:

class People:
        def __init__(self,name,age,sex):
                self.__name = name
                self.__age = age
                self.__sex = sex

        @property
        def Name(self):
                return self.__name
        
        @Name.setter
        def Name(self, name):
                self.__name = name
                
        @staticmethod
        def greetings(name):
                print('Hi, im ',name)

        
he = People('Pedro',19,'M')
print(he.Name)

he.Name = 'Claudio'
print(he.Name)

People.greetings(he.Name)

# OUTPUT:
 
Pedro
Claudio
Hi, im  Claudio

# EXAMPLE OF STATIC AND RETURN OTHER CALSSES:

class Fish:
        def __init__(self):
                self.animal = 'fish'
        def go(self):
                print(' Im a fish, i love the water and sun.')

class Bird:
        def __init__(self):
                self.animal = 'bird'
        def go(self):
                print(' The air is strong today, im air´s rat.')

class Specie:
        def __init__(self, animal):
                self.animal = animal
        
        @staticmethod
        def classify(animal):
                animal = animal.lower()
                if animal == 'fish':
                        return Fish()
                elif animal == 'bird':
                        return Bird()
                else:
                        return Specie(animal)
                
        def go(self):
                print(f' Not exist the animal: {self.animal}')
                

obj = Specie.classify('Fish')
obj.go()

obj = Specie.classify('BIRD')
obj.go()

obj = Specie.classify('GODZILLA')
obj.go()

# OUTPUT:

'''
 Im a fish, i love the water and sun.
 The air is strong today, im air´s rat.
 Not exist the animal: godzilla
'''

37 ------------------------>>> USO DEL MAP :

MAP() : ITERA A CADA VALOR ENVIADO POR UNA FUNCION, PRIMERO VA LA FUNCION DESPUES EL ELEMENTO A ITERAR: (FUNCION, ITERACION(LIST,DIC,TUPLE,ETC)).

def grade(score):
    if score < 5:
        return 'SS'
    elif score < 7:
        return 'AP'
    elif score < 9:
        return 'NT'
    elif score < 10:
        return 'SB'
    else:
        return 'MH'

def apply_grade(scores):
    subjects = map(str.upper, scores.keys())
    grades = map(grade, scores.values())
    return dict(zip(subjects, grades))

print(apply_grade({'Matemáticas':6.5, 'Física':5, 'Química':3.4, 'Economía':8.2, 'Historia':9.7, 'Programación':10}))

38 ---------------->>>>>>  FILTER : USO DE FILTER :

//EXTRAE LOS ELEMENTOS QUE CUMPLAN EL REQUISITO DE LA FUNCIONEN CASO QUE SEAN VERDADEROS:
// O SEA SI EN LA LISTA EL PRIMERO ES TRUE Y LOS DEMAS FALSE ENTONCES RETORNA UNA LISTA CON EL ELEMENTO TRUE QUE ES EL PRIMERO.

>>> l = [5,10,73,25,52]
>>> print(list(filter(lambda n:n%5==0, l)))

SALIDA : [5, 10, 25]

39 ------------------->>>>  USO DE NUMPY or NP: 

import numpy as np

arreglo = np.zeros([3,5,4])   // genera una marizz replea de zeros o 0. 3 = canidad de marizes, 5 = filas, 4 = columnas.

arreglo = np.ones([4,5,3])   	//genera una mariz replea de unos o 1. 4 = arreglos, 5 = filas, 3 = columnas.
print("\nejemplo 1:\n",arreglo)

arreglo = np.arange(10)        // genera desde el 0 al 9 un array.
print("\nejemplo 2:\n",arreglo)

arreglo = np.arange(5,10)      // desde 5 hasta 9, siempre el limite es -1. (limite 10 = 10-1 = 9)
print("\nejemplo 3:\n",arreglo)

arreglo = np.arange(2,3,0.1)   // desde 2, hasta 3, con paso de 0.1. 
print("\nejemplo 4:\n",arreglo)

arreglo = np.linspace(1.,4.,6)   // genera un array de "6" valores entre "1." hasta "4.".
print("\nejemplo 5:\n",arreglo)

arreglo = np.full((2,3), 5)      // 2 = filas, 3 = columnas, 5 = el valor que va a ver en todos los arrays.
print("\nejemplo 6:\n",arreglo)

arreglo = np.eye(5)    // genera una mariz identidad, "5" es el numero de columnas  filas o sea una martriz de 5x5.
print("\nejemplo 7:\n",arreglo)

// tambien se podria usar: "array = np.identity(5)" donde 5 es una matriz de 5x5.

arreglo = np.random.random((4,5))   // 4 = filas, 5 = columnas.
print("\nejemplo 8:\n",arreglo)

arreglo = np.empty((3,5))  //genera una  martriz vacia de ceros. 3 = filas, 5 = columnas.

a = np.array([(1,2,3),(4,5,6)])
print(a.ndim)       # resulado "2"  porque el array evaluado es bidimensional.

a = np.array([(1,2,3)])
print(a.dtype)       # imprime el tipo de dato, en este caso es "int64".

a = np.array([(1,2,3,4,5,6)])
print(a.size)    # 6, retorna el tamaño del array.
print(a.shape)   # (1,6)   retorna la forma del array.

----
a = np.array([(1,2,3),(4,5,6)])   # matriz de 2 filas por 3 columnas.
print(a)

[ [1,2,3]
[4,5,6] ]

a = a.reshape(3,2)  # se cambio a una matriz de 3 filas  2 columnas.
print(a)

[ [1,2]
[3,4]
[5,6] ]
----
a = np.array([(1,2,3),(4,5,6)])   
print(a[0,2])   # imprime "3".

a = np.array([(1,2,3),(4,5,6)])   
print(a[0:,2])   # imprime "[3,6]". # "[0:" = desde el array 0 hasa el final, y ", 2]" obtener el elemento en la posicion 2.

a = np.array([(1,2,3),(4,5,6)])   # se puede usar con array o matrices.
print(a.min())   # imprime "1".
print(a.max())   # imprime "6".
print(a.sum())   # imprime "21".

a = np.array([(1,2,3),(4,5,6)])   
print(np.sqrt(a))   # imprime la raiz de cada elemento.
print(np.std(a))    # imprime la desviacion estandar (La desviación estándar es la medida de dispersión más común, que indica qué tan dispersos están los datos con respecto a la media)
# la desviacion standar viene a ser el _Delta de X.

print(np.mean(a))  # la media del array, matriz etc.

x = np.array([(1,2,3),(4,5,6)])  
y = np.array([(1,2,3),(4,5,6)])
print(x+y) # imprimira una matriz, suma, resta, producto, y division.
print(x-y)
print(x*y)
print(x/y)

X = np.random.permutation(X)  # genera un roden aleatorio de los elementos del array enviado.

mu = np.mean(X,axis=0) # X es un arreglo o matriz, AL PONER AXIS = 0 NOS RETORNARA UN ARRAY DE LA MEDIA DE CADA COLUMNA.
std = np.std(X,axis=0)

std[ std == 0 ] = 1 # COMO UN MINI CONDICIONAL. si elemento[x] es == 0 entonces elemento[x] = 1 etcetcetc.

a = np.array([(1,2,3),(4,5,6)])
print(np.sum(a))  # imprime 21, suma todos los elementos del arreglo o matriz.

dists = np.sum(np.power(X_test[:, np.newaxis] - X_train,2),axis=2)
# se usa el axis 2, para entrar al 3 array. [ [ [3],[3] ],[ [3], [3] ] ]

a = np.arange(6).reshape(2,3) + 10
a
array([[10, 11, 12],
       [13, 14, 15]])

np.argmin(a)
0

np.argmin(a, axis=0)
array([0, 0, 0])

np.argmin(a, axis=1)
array([0, 0])


result = np.where(arr == 15)   #encontrar el indice de un array o matriz
 
print('Tuple of arrays returned : ', result)
print("Elements with value 15 exists at following indices", result[0], sep='\n')

#salida:
Tuple of arrays returned :  (array([ 4,  7, 11], dtype=int32),)
Elements with value 15 exists at following indices
[ 4  7 11]

#CONCATENAR O UNIR 2 ARRAY O MATRICES:
A = np.array([([1,2],[3,5]]))
B = np.array(([5,6]))

np.concatenate((A, B))

matrix([[ 1.,  2.],
        [ 3.,  4.],
        [ 5.,  6.]])

#contador o de lementos: 

d = np.random.randint(0, 5, 20)
[4 0 3 3 3 1 3 2 4 0 0 4 2 1 0 1 1 0 1 4]

print(np.bincount(d))
[5 5 2 4 4]

#ordenamiento de arreglos o matrices:
c = np.array([2.5, 3.2, 4.3, 0., 8.7, 0.])

print(np.sort(c))  # [0.  0.  2.5 3.2 4.3 8.7]
print(np.argsort(c)) # [3 5 0 1 2 4]     # los indices de los elementos ordenados.

# np.dot(array) # multiplica matrices solo si sus dimensiones son validas.

#SALIDA :

ejemplo 1:

 [[[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]]

ejemplo 2:
 [0 1 2 3 4 5 6 7 8 9]

ejemplo 3:
 [5 6 7 8 9]

ejemplo 4:
 [2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9]

ejemplo 5:
 [1.  1.6 2.2 2.8 3.4 4. ]

ejemplo 6:
 [[5 5 5]
 [5 5 5]]

ejemplo 7:
 [[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]

ejemplo 8:
 [[0.54600486 0.73706976 0.85524028 0.89200753 0.25364417]
 [0.35571309 0.02002548 0.1081764  0.27915285 0.47872488]
 [0.49900018 0.03077063 0.57523311 0.59013634 0.80158343]
 [0.65366827 0.09053311 0.30189149 0.79028571 0.94809943]]


import numpy as np # DATOS CON CABECERA, y ORDENAR CON SEGUN ETIQUETA DE CABECERA
cabecera = [('nombre','S10'),('edad',int)]
datos = [('juan',19),('felipe',23),('luis',16),('thiago',18)]

users = np.array(datos, dtype=cabecera)

np.sort(users, order = 'edad')

#salida: 

array([(b'luis', 16), (b'thiago', 18), (b'juan', 19), (b'felipe', 23)],
      dtype=[('nombre', 'S10'), ('edad', '<i8')])

# MATRIZ CON DIAGONAL DEFINIDA:
import numpy as np
arr = np.diag([1,2,3,4,5])
print(arr)

#salida: 

[[1 0 0 0 0]
 [0 2 0 0 0]
 [0 0 3 0 0]
 [0 0 0 4 0]
 [0 0 0 0 5]]

# Use Where:

import numpy as np

A = np.random.random((3,3))
A = np.where(A > 0.5, 1, 0)
print(A)

# np.linalg. etc:

funciones de algebra linear.

# MESHGRID:

import numpy as np
x, y = np.arange(-5,6,1), np.arange(-3,4,1)
combination = np.meshgrid(x,y)
print(combination)

# output: 

[array([[-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5]]),
 array([[-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
        [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
        [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
        [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
        [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3]])]

# matrix invocation:

import numpy as np
arr = np.array([[0,-1], [1, 0]])
matrix1 = np.matrix(arr)

matrix2 = np.matrix('0 -1; 1 0')

matrix3 = np.matrix('0 ,-1; 1 ,0')

print(matrix1)
print(matrix2)
print(matrix3)

# output:
'''
[[ 0 -1]
 [ 1  0]]
[[ 0 -1]
 [ 1  0]]
[[ 0 -1]
 [ 1  0]]
'''

# agregar y quitar items a un array:
# more:https://www.analyticslane.com/2019/11/27/numpy-basico-como-anadir-elementos-en-arrays-de-numpy-con-np-append/#:~:text=append()%20es%20uno%20de,append()%20.

import numpy as np
a = np.array([1,2,3,4,5])
b = np.array([1,2,3,4,5])

a = np.append(a, [6], axis=0) # agregar
b = np.append(b, [6], axis=0)

a = a[:-1]  # quitar
b = b[:-1]

val = a + b

print(val)

# equivalent

import numpy as np
a = np.array([1,2,3,4,5])
b = np.array([1,2,3,4,5])

a = np.append(a, 6, axis=None)
b = np.append(b, 6, axis=None)

a = a[:-1]
b = b[:-1]
val = a + b
print(val)


40 ------------------->>> USO DE * Y ** EN PYTHON PARA PARAMETROS : SOBRECARGA DE FUNCIONES 2.0 :

// viene a ser como una sobrecarga de funciones o mejor llamado como un " parametro dinamico ":

def por_posicion(*args):
       cadena = ""
       for i in args:
              cadena += str(i)
              print(i)
       print("cadena = ",cadena)
       
def por_nombre(**kwargs):
       print(kwargs)
       
def Send(*args, **kwargs):
       print("\n ARGUMENTS: \n")
       for i in args:
              print(i)
       print("\n KEYWORDS ARGUMENTS: \n")
       for i in kwargs:
              print(i, " -> ",kwargs[i])
              
print("\nPOR POSICION: \n")
por_posicion(45,"alex",True,"datos",3.1416)

print("\nPOR NOMBRE: \n")
por_nombre(h="carpio",x="alexander",k="mamani")

Send(5,"alex",41.4,val="yorishi",z=49)

# SALIDA :

POR POSICION: 

45
alex
True
datos
3.1416
cadena = 45alexTruedatos3.1416

POR NOMBRE: 

{'h': 'carpio', 'x': 'alexander', 'k': 'mamani'}

 ARGUMENTS: 

5
alex
41.4

 KEYWORDS ARGUMENTS: 

val  ->  yorishi
z  ->  49

--EJEMPLO 1: 

def suma(*args):
       total = 0
       for i in args:
              total += i
       return total

print(suma(1,2,3,4,5))

--EJEMPLO 2:

def suma_todo(**kwargs):
       total = 0
       cadena = ""
       for i in kwargs:
              total += kwargs[i]
              cadena += f"{i}, "
       return cadena + " = " + str(total)

print(suma_todo(pollo=7.5,arroz=5.0,papa=3.5))

41 ---------------->>>> PANDAS AS PD :

import pandas as pd
a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a) 

# salida:

   0  1  2
0  1  2  3
1  4  5  6 

import numpy as np
import pandas as pd
data = np.array([ [" ","col1","col2"] , ["fila1",22,33] , ["fila2",55,16] ])
print(pd.DataFrame(data = data[1:,1:], index = data[1:,0], columns = data[0,1:]))
# primer [1:,1:] para los elementos a mostrar, segundo index [1:,0] para los indices de las filas, tercero[0,1:] para los indices de la columna.
# salida:

      col1 col2
fila1   22   33
fila2   55   16

countrys = pd.Series({"Peru":"Lima","Argentina":"Buenas Aires",
                  "Chile":"San Tiago","Mexico":"Mexico CD o DF"})
print(countrys)

#salida:
Peru                   Lima
Argentina      Buenas Aires
Chile             San Tiago
Mexico       Mexico CD o DF

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a.shape)  # imprime el tipo de martriz en ese caso es "2X3"

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(len(a.index))  # imprime la altura o numero de filas en este caso es "2".

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a.describe())   #Esadisticas del Frame o matriz.

#salida:
             0        1        2
count  2.00000  2.00000  2.00000
mean   2.50000  3.50000  4.50000
std    2.12132  2.12132  2.12132
min    1.00000  2.00000  3.00000
25%    1.75000  2.75000  3.75000
50%    2.50000  3.50000  4.50000
75%    3.25000  4.25000  5.25000
max    4.00000  5.00000  6.00000

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.mean())  # imprime la media de cada columna.

#salida:
0    4.0
1    5.0
2    6.0

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.corr())  #para mostrar todas las coorrelaciones entre los numeros.

#salida:
     0    1    2
0  1.0  1.0  1.0
1  1.0  1.0  1.0
2  1.0  1.0  1.0

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.count())  #para mostrar la cantidad de los valores no nulos en el frame.

#salida:
0  3
1  3
2  3

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.max())  #para mostrar el valor mas alto en cada columna.

#salida:
0  7
1  8
2  9

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.min())  #para mostrar el valor mas bajo en cada columna.

#salida:
0  1
1  2
2  3

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.median())  #para mostrar la mediana de cada columna.

#salida:
0  4
1  5
2  6

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.std())  #para mostrar la desviacion estandar de cada columna o en otras palabras el Delta de X.

#salida:
0  3.0
1  3.0
2  3.0


42 ---------------->>>> MATPLOLIB : import matplotlib.pyplot as plt :
|| TEXT ||

plt.text(3,-0.1, "Suma de Riemann: ", color='r')       # 1 parametro(eje x), 2 parametro(eje y), 3 parametro(string), 4 (color con una char).
plt.text(3,-0.5, "Suma de Riemann: ", color='r')

|| MARCO FIGURA ||

plt.figure(figsize=(7,6))  // PRIMER PARAMETRO DE "FIGZISE" (X,Y).

||| DIAGRAMA DE LINEA |||

EJEMPLO 1:
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 6,1) #Eje X
y = np.arange(0,6,1)  #Eje Y

plt.plot(x, y, color ="red", label="linea", linewidth = 3)
plt.legend()      #muestra la legenda de los datos.
plt.show()        #muestra una pendiente de color rojo.

EJEMPLO 2:
import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12])   #  X1 CHOCA CON Y1, EJEMLO X1 = 4 Y Y2 = 5 SE GENERA UN PUNTO EN LA GRAFICA EN LA POSICION (X,Y) = (4,5).
y1 = np.array([5,15,10,15,5])

x2 = np.array([5,5,10,10,5])
y2 = np.array([2,7,7,2,2])

plt.plot(x1,y1, label="liena", linewidth=2, color="green")  # creacion de la recta "M"
plt.plot(x2,y2, label="linea", linewidth=2, color="blue")   # creacion de un "Cuadrado"

plt.title("Diagram de M",color="red")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| DIAGRAMA DE BARRAS |||

import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12])
y1 = np.array([5,15,10,15,5])

x2 = np.array([5,7,9,11,15])
y2 = np.array([10,7,11,6,8])

# a diferencia de los vectores anteriores, cambiaremos el "plot" por el "bar" para barras.

plt.bar(x1,y1, label="liena", color="orange")  # creacion de las barras narangas.
plt.bar(x2,y2, label="linea", color="skyblue")   # creacion de las barras celestes.

plt.title("Diagram de Barras",color="yellow")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| HISTOGRAMAS |||

import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12,51,5,1,3,6,94,12,53,75,98,11,33,41])   # VA SER COMO UNA CONTABILIZACION E VALORES.
y1 = np.array([0,20,40,60,80,100])

# ahora usamos "hist", PARA QUE SIRVE?, PUES EN EL PRIMER PARAMETRO VA LOS VALORES DEL EJE "Y" Y EN EL SEGUNDO LOS DEL EJE "X".
# DONDE EL EJE X GRAFICA UNA BARRA DONDE MUESTRA LA CANTIDAD DE VALORES QUE SE ENCUENTRAN ENTRE EL PUNTO (X0 Y X1 .... XN-1 Y XN).
# EJEMPLO: SE VE QUE ENTRE EL EJE X, ENTRE EL 0 Y 20 HAY 11 VALORES, ENTONCES SE DIBUJA UNA BARRA HASTA EL NUMERO 11 y ASI SUCESIVAMENTE CON LOS DEMAS.

plt.hist(x1, y1, histtype="bar", label="liena", rwidth=1, color="brown")  # creacion de las barras marrones.

plt.title(" Histograma ",color="violet")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| GRAFICO DE DISPERSION |||

# generacion de puntos en la grafica, siendo interceptados por el eje "x" y "y".
import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([1.5,4,5,8,10,12])
y1 = np.array([5,2,10,8,1,14])

x2 = np.array([3.5,7,6,9,10,11])
y2 = np.array([6,4,3,12,7,9])

plt.scatter(x1, y1, label="puntos", color="red")  # creacion de los puntos rojos.
plt.scatter(x2, y2, label="puntos", color="blue")  # creacion de los puntos azules.

plt.title("Grafico de Dispersion",color="purple")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| GRAFICO CIRCULAR |||

import numpy as np
import matplotlib.pyplot as plt

#DATOS ENVIADOS.
dormir =[7,8,6,11,7]
comer = [2,3,4,3,2]
trabajar =[7,8,7,2,2]
recreación = [8,5,7,8,13]
#SACAMOS UN CONCLUSION Y SALE DIVISONES:
divisiones = [7,2,2,13] 
actividades = ['Dormir','Comer','Trabajar','Recreación']  #TEXTO QUE PARARECERA SEGUN EL ORDEN
colores = ['red','violet','skyblue','orange']  # COLORES SEGUN EL ORDEN

plt.pie(divisiones, labels=actividades, colors=colores, startangle=90, shadow=True, explode=(0.1,0,0,0), autopct='%1.1f%%')
# DIVISIONES = EL PESO DE CADA ELEMENTOS DEL ARRAY, STARTANGLE = COMIENZA CON UN ANGULO DE 90 PUDE SER NULO TAMBIEN.
# SHADOW = TRUE O FALSE SEGUN EL GUSTO, EXPLODE = SI SE PONE UN VALOR DIFERENTE A 0, SERA SEPARADO DE LOS DEMAS CON EL VALOR DADO SEGUN LA POSICION.
# AUTOPCT = SE MOSTRARA EL VALOR EN PORCENTAJES E CADA DATO.

plt.title('Gráfico circular 24 H',color = 'purple')
plt.show()


- EJEMPLO 1 DISTANCIA:

import numpy as np
import matplotlib.pyplot as plt
import math

def distancia(x1,y1):
  return math.sqrt(pow(x1[1]-x1[0],2)+pow(y1[1]-y1[0],2))

x1 = np.array([3,7])
y1 = np.array([1,4])

plt.scatter(x1,y1, color = "red")

plt.plot(x1,y1,color = 'skyblue')

plt.legend()
plt.grid()
plt.xlabel("Eje X: ")
plt.text(3,-0.1, "La Distancia entre los puntos es: "+str(distancia(x1,y1)), color='r')
plt.show()

- EJEMPLO 2 :

43 ---------------->>>>  OPERADORES DE CLASE EN PYTHON : OPERATORS


class Backpack():
  def __init__(self, owner):
    self.owner = owner
    self.__store = {}

    print('backpack bought.')

  def __call__(self, item):
    if item not in self.__store:
      self.__store[item] = 1
    else:
      self.__store[item] += 1

  def __getitem__(self, idx):
    if idx < 0 or idx >= len(self.__store):
      return 'that item doesnt exist in the backpack.'
    return list(self.__store.items())[idx]

  def __len__(self):
    return sum(self.__store.values())

  def store(self):
    return self.__store

class Num():
  def __init__(self, nums):
    self.nums = nums
  
  def __add__ (self, Obj):  # operador '+' suma de objetos
    res =  self.nums + Obj.nums
    return Num(res)
  def __call__(self):
    return self.nums
a = Num([1,2,3])
b = Num([4,5,6])
c = a + b
print(c())

Mochila = Backpack('alex')
Mochila('pencil')
Mochila('pencil')
Mochila('book')
print(Mochila[2])
print(len(Mochila))
Mochila.store()


## Imprime el Objeto y destructor del objeto.

class Data:
        def __init__(self, store):
                
                self.store = store
                
        def __repr__(self):
                return f' Your data {self.store}'

        def __del__(self):
                print('the Object was deleted')

inventary = Data([1,2,3])
print(inventary)
del(inventary)

44 ---------------->> Use " * " :

l = [1,2,'aea',True]

a = {'aea':1,'gaa':3}

print(*l)
print(l)
print(*a)
print(a)

- output:

1 2 aea True
[1, 2, 'aea', True]
aea gaa
{'aea': 1, 'gaa': 3}

a = {'a':1, 'b':2}
b ={'c':3, 'd':4}

c = {*a,*b}   # {'c', 'a', 'b', 'd'}

c = {**a,**b}  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

45 ---------------->> PyAutoGui :

// escribir por teclado automatico:

import pyautogui, time
time.sleep(5)
for word in f:
	pyautogui.typewrite("mensaje spam")
	pyautogui.press("enter")

// advertencia o warning:

import pyautogui
def showDialog(title='Error!', 
    text='''
    POSIBLES ERRORES:
    \n* Ingreso mal el url o link de YT.
    \n* Hubo un error a la hora de descargar o convertir un archivo.
    \n* Cierre la app o intentelo de nuevo.
    '''):

    pyautogui.alert(text, title, button='OK')

46 ----------------->> DOCS : DOCX : WORD

import zipfile
import docx
import os

path = 'D:\....'


# zf = zipfile.ZipFile(path + '\file_name.zip')
# #print(zf.namelist())
# zf.extractall(path2)
# zf.close()

photos = list(os.listdir(path2))
#print(photos)

doc = docx.Document()

for i in range(len(photos)):
    doc.add_picture(path + photos[i], width=docx.shared.Cm(8), height=docx.shared.Cm(10))

doc.save('images_etc.docx')

47 ----------------->> DERIVATES : DERIVADAS : 

import sympy as sp

x = sp.Symbol('x') # Variable dependiente

y = x**3 # funcion o f(x)

print(sp.diff(y,x))  #(funcion, variable, numero de derivadas)
print(sp.diff(y,x,2))
print(sp.diff(y,x,3))


### WITH NUMPY

import sympy as sp
import numpy as np

x = sp.Symbol('x') # Variable dependiente

y = x**3 + 1 # funcion o f(x)

y_prime = sp.diff(y,x)

f = sp.lambdify(x, y_prime, 'numpy')
print(f(np.ones(3)))

<<<<<<< HEAD
48 ----------------->> Create QR Code : pip install qrcode

// Simple text:

import qrcode

img = qrcode.make('hello, you create a text qr code')
img.save('D:/my_qrcode.png')


// Configuration QrCode:

import qrcode

qr = qrcode.QRCode(box_size=20, border=2)
qr.add_data('hola amigooo')
#qr.make(fit=True)

img = qr.make_image(fill_color='black', back_color='white')
img.save('D:/my_qrcode.png')

// Configuration QrCode 2.0:

import qrcode

qr = qrcode.QRCode(box_size=50, border=1)
qr.add_data('https://www.youtube.com/')
#qr.make(fit=True)

img = qr.make_image(fill_color='red', back_color='blue')
img.save('D:/my_qrcode.png')


// save qr image in other format

import qrcode
import qrcode.image.svg as SG

factory = SG.SvgPathImage
img = qrcode.make('hi, hello, hola, etc.', image_factory=factory)
img.save('D:/my_qrcode.svg')

49 ----------------->> Open Images: images:

# 1 option:
from PIL import Image
data = Image.open('my_cat.png')
data.show()

# 2 option:
import matplotlib.pyplot as plt
from PIL import Image

data = Image.open('my_cat.png')
plt.imshow(data)
plt.show()

# resize image:
from PIL import Image
img = Image.open('my_cat.png').resize((28,28)) # 28x28 pixels

# RGB to GRAY : Scale : RGB => gray : (R + G + B)/3
from PIL import Image
img = Image.open('my_cat.png')
new_img = img.convert('L')  # 'L' = (8-bit pixels, black and white)

# write image:
import pyautogui
import PIL.Image as Image

screen = pyautogui.screenshot()
img = Image._show(screen)


50 ----------------->> Windown rotate or controller:

pip install rotate-screen
pip install pypiwin32

import rotatescreen
import time
screen = rotatescreen.get_primary_display()  # originality the window is in angle 0°

for i in range(1,11):
    time.sleep(0.2)
    val = i*90 % 360
    screen.rotate_to(val)

51 ----------------->> all, any, yield, and trick:

# trick 1
a, b = input('Enter 2 numbers separated by a space: ').split()
print(f'{a} U {b} = {a+b}')

# trick 2
age = 27
weigth = 72
sex = 'M'

if age > 20 and weigth < 100 and sex == 'M':
        print('he cant be a segurity police, with and')
        
if age > 20 or weigth < 100 or sex == 'M':
        
        print('he cant be a segurity police, with or')

conditions = [age > 20, weigth < 100, sex == 'M']


if all(conditions):    # and
        print('he cant be a segurity police, with all')

if any(conditions):     # or
        print('he cant be a segurity police, with any')

# trick 3
def sum_elements(*args):  # *[1,2,3,4,5] = 1,2,3,4,5
        res = 0
        for i in args:
                res += i
        return res
print(sum_elements(1,2,3,4,5))

# trick 4
string = 'abcdefghi'
print(string[::2])  # where [begin:finish:steps] type for
print(string[::-1]) # backward

# trick 5
def table_of_number(x):
        for i in range(11):
                yield f'{x} x {i} = {x*i}'

values = table_of_number(3)
for i in values:
        print(i)



def split_test(arr):
        for element in arr:
                yield element

values = list(split_test('hola gente'))
print(values)


52 -------------->> os para cmd : use os : import os : use subprocess :

# send and receive message temporary:
import os
latencia = list(os.popen('ping google.com'))
ip_pc = list(os.popen('ipconfig'))
print(latencia, ip_pc)

# send message:

import os
os.system('ping google.com')

# get directory actual:

1 option: os.path.dirname(os.path.abspath(__file__))
2 option: os.path.abspath(os.getcwd())

# get all elements in this directory:

os.listdir()

# join two paths:

path = os.path.join(os.path.dirname(os.path.abspath(__file__)), NOMBRE_ARCHIVO) 
path = os.path.abspath(__file__)) + '\\' + NOMBRE_ARCHIVO

## subprocess : SUBPROCESS :

# run a line
import subprocess
def cmd(commando):
    subprocess.run(commando, shell=True)

# examples:
cmd('TITLE Título de la ventana')

cmd('myscript.cmd parametro1 parametro2')

# Al usar shell=Truese pasan los parametros como texto

def cmd(commando):
    resultado = subprocess.run(commando, shell=True)
    # Comprobar resultado, si es diferente de 0 lanza una excepción
    resultado.check_returncode()
 
53 -------------->> decoradores : decorators

# Example 1:
def verificar_denominador(funcion):
        def verificar(a,b):
                if b==0:
                        return 'Error: no existe la division por cero.'
                return funcion(a,b)
        return verificar

@verificar_denominador
def dividir(a,b):
        return a / b

print(dividir(12,3)) # 4.0
print(dividir(12,0)) # Error: no existe la division por cero.

# Example 2:
def subtraccion_mayor(funcion):
        def mayor(a,b):
                if a > b:
                        return funcion(a,b)
                a, b = b, a
                return funcion(a,b)
        return mayor

@subtraccion_mayor
def sustraer(a,b):
        return a - b

print(sustraer(5,3)) # 2
print(sustraer(2,9)) # 7


54 -------------->> Crear un gif : creat gif :

import imageio
import os

images = []
filenames = os.listdir()  # lista de todos los elementos en tu directorio actual

for filename in filenames:
    images.append(imageio.imread(filename))

imageio.mimsave('my_animates.gif', images)


# example 2:

import numpy as np
import imageio
import matplotlib.pyplot as plt
import os
import shutil
from matplotlib.path import Path
import matplotlib.patches as patches
os.mkdir('images_plt')
from matplotlib.patches import PathPatch


x = np.array([1,1,0,-1,-1])
y = np.array([0,1,1, 1, 0])

filenames = []

def draw_vectors(vectors, colors='red', xxlim=-2, xylim=2, yxlim=-1, yylim=2, title='', pos=0):
  fig = plt.figure()
  ax = fig.add_subplot(111)

  if pos == 0:
    ax.add_patch(
     patches.Rectangle(
        (0.03, 0.03),
        1,1,
        facecolor = 'gold',
     ))
  elif pos == 1:
    path = Path([[0,0],[0,1],[1,2],[1,1],[0,0]])
    patch = PathPatch(path, facecolor='gold')
    ax.add_patch(patch)
  elif pos == 2:
    pass
  elif pos == 3:
    path = Path([[0,0],[0,1],[-1,2],[-1,1],[0,0]])
    patch = PathPatch(path, facecolor='gold')
    ax.add_patch(patch) 
  else:
    ax.add_patch(
     patches.Rectangle(
        (-0.025, 0.03),
        -1,1,
        facecolor = 'gold',
     ))    
  

  for i,v in enumerate(vectors):
    try:
      ax.quiver([0],[0],[v[0]], [v[1]], color=colors[i], angles='xy', scale_units='xy', scale=1, alpha=1)
    except:
      ax.quiver([0],[0],[v[0]], [v[1]], color=colors, angles='xy', scale_units='xy', scale=1, alpha=1)
  
  ax.axvline(x=0,c='gray',zorder=0) # zorder for background
  ax.axhline(y=0,c='gray',zorder=0)

  ax.set_xlim(xxlim,xylim)
  ax.set_ylim(yxlim,yylim)

  plt.title(title)

  plt.grid()
  path = 'images_plt/place_vector' + str(pos+1) + '.png'
  filenames.append(path)
  plt.savefig(path)

tl = ['Determinant = 1 & Area = 1', 'determinant = 1 & Area = 1', 'determinant = 0 & Area = 0', 'determinant = -1 & Area = 1', 'determinant = -1 & Area = 1',]
for i in range(x.shape[0]):
    draw_vectors([[0,1] , [x[i],y[i]]],colors=['green','red'],pos=i,title=tl[i])

images = []
for filename in filenames:
  for _ in range(4):
    images.append(imageio.imread(filename))

imageio.mimsave('determinant_negative.gif', images)
shutil.rmtree('images_plt') 


55 -------------->> Type Hinting : tipo de parametro de funciones y salida :

# 1 Example (function where the parameter must be an integer(int) and return a string(str)):
 
def function_age(age : int) -> str:
        return f'you age is: {age}'

print(type(function_age(15)))   # <class 'str'>

# 2 Example:

def input_a(a : int) -> str:
        return a * 10

def print_a(a : str):
        return f'the element is: {a}'

print(print_a(input_a(3))) # the element is: 30

56 -------------->> pytube : youtube python :

import pytube # pip install pytube

url = 'https://www.youtube.com/watch?v=UteUqDoCe2s'
resolution = '720p'   # Video resolution i.e. "720p", "480p", "360p";  without audio: "240p", "144p".

video = pytube.YouTube(url)
stream = video.streams.filter(resolution = resolution).first() # get video, audio, and set the resolution.
stream.download()

# other form:

import pytube

url = 'https://www.youtube.com/watch?v=UteUqDoCe2s'

video = pytube.YouTube(url)
stream = video.streams.first() # get video and audio with low quality, that is to say, by default.

# stream = video.streams.get_lowest_resolutiont() # get video and audio with low quality.
# stream = video.streams.get_highest_resolution() # get video and audio with maxime quality.

stream.download()

# Extra:

video = pytube.YouTube(url)

video.title # Title of the video
video.video_id # Id 
video.age_restricted # Age or when was published.

resolution = 18     # 18, 22, 137, 313. (low, medium, high, very high)
stream = video.streams.get_by_itag(resolution) # get only video in mp4.

stream = video.streams.get_audio_only() # get only audio in mp4.

from pytube import YouTube
video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.filter(only_audio=True).first()
stream.download()

from pytube import YouTube
video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.filter(only_audio=True).all()
stream[0].download()


stream = video.streams.all() # get all information about the video
print(list(stream))

stream.default_filename # the filename of the video, e.g: 'matematics.mp4'


# get audio and conver to mp3:

from pytube import YouTube
from moviepy.editor import VideoFileClip
import os

video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.get_lowest_resolution() 	    # simitar to: "video.streams.first()"
stream.download()

filename = stream.default_filename

convert = VideoFileClip(filename)
convert.audio.write_audiofile(filename[:-4] + '.mp3')  # 'matematics.mp4' => 'matematics' + '.mp3'
convert.close()

os.remove(filename) # remove the video mp4.


# if apper the error:
# self.fps = infos['video_fps']
# KeyError: 'video_fps'
# is because you downloaded a video without frames, the solution for this problem is download the video with audio and video.
# "video.streams.get_lowest_resolution()", or "video.streams.first()", "stream = video.streams.all();  stream[0].download()", "video.streams.filter().first()", etc.


# playlist:

playlist = pytube.Playlist(url)
resolution = '360p'

for ulr in in playlist:
	video = pytube.YouTube(url)
	stream = video.streams.get_by_resolution(resolution)
	stream.download()

# download:

video = pytube.YouTube(url) # this script is in '..\app\main.py'
stream = video.streams.first()
stream.download(outpath = r'..\app\youtube_downloads', filename='hola.mp4') # also we can set the path of the installing, or create a folder as youtube_donwloads.
# finename = name that we want, but that finish in '.mp4'.

57 -------------->> voice to text : voice reproduce of text :

# vocie to text:

import speech_recognition as sr
r = sr.Recognizer() 

while True:
    with sr.Microphone() as source:
        print('Speak Anything : ')
        audio = r.listen(source)
    try:
        text = r.recognize_google(audio)
        print('You said: {}'.format(text))
    except:
        print('Sorry could not hear')


# voice reproduce of text :

from gtts import gTTS
from playsound import playsound
import os

NOMBRE_ARCHIVO = "voz.mp3"

message = input('you text: ')
tts = gTTS(message, lang='es') # (message, lang='es-us') 'es-us': 'Spanish (United States)'

tts.save(NOMBRE_ARCHIVO)

playsound(NOMBRE_ARCHIVO)
os.system(f'DEL /F /A {NOMBRE_ARCHIVO}')

# path = os.path.join(os.path.dirname(os.path.abspath(__file__)), NOMBRE_ARCHIVO) # os.path.abspath(__file__)) + '\\' + NOMBRE_ARCHIVO
# os.remove(path)

58 -------------->>