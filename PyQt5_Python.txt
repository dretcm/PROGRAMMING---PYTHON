--------------------------------------------------------- PYQT5------------------------------------------------------------}
More About PyQt5: https://codetorial.net/en/pyqt5/intro.html

--------------->> VALIDACIONES :

usar el: 

try: 
	//proceso a seguir}
except ERROR A DAR:
	//mensaje

1 ---------------->    VENTANA SIMPLE :

from PyQt5 import uic
from PyQt5.QtWidgets import QApplication

Form, Window = uic.loadUiType("dialog.ui")

app = QApplication([])
window = Window()
form = Form()
form.setupUi(window)
window.show()
app.exec_()

- me :

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
dig =uic.loadUi("primer.ui")

dig.show()
app.exec()


/// aplicaion de calculadora: 

from PyQt5 import QtWidgets, uic

class Calculadora:
	vil=2
	def __init__(self):
		self.app = QtWidgets.QApplication([])
		self.app.setApplicationDisplayName('HOLA GENTE') # change the title of the window
		self.dig = uic.loadUi("primer.ui")

		self.dig.boton1.clicked.connect(self.suma)

		self.dig.boton2.clicked.connect(self.mul)

		self.dig.boton3.clicked.connect(self.divide)

		self.dig.boton4.clicked.connect(self.power)

		self.dig.show()
		self.app.exec()

	def suma(self):
		self.dig.e3.setText(str(int(self.dig.e1.text()) + int(self.dig.e2.text()) ))
	def mul(self):
		self.dig.e3.setText(str( int(self.dig.e1.text()) * int(self.dig.e2.text())  ))
	def divide(self):
		self.dig.e3.setText(str(  int(self.dig.e1.text()) / int(self.dig.e2.text()) ))
	def power(self):
		self.val=1
		self.ele=int(self.dig.e2.text())
		for i in range(self.ele):
			self.val*=int(self.dig.e1.text())
		self.dig.e3.setText(str(self.val))


yo = Calculadora()


2 ----------->>> ENTRADAS :

dig.nombre.setText("valor a poner")
self.dig.input_1.clear() # similar al anterior pero limpia la entrada

dig.nombre.text()  //saca valor

self.dig.nombre.setPlaceholderText("resultado")    //va a tener cuando no haya texto ese sinvolo o lo q ingreses

self.dig.e1.setFocus() //para que este azulito

def show():
	pass
self.dig.nombre.returnPressed.connect(self.show)   /// PARA APRETAR ENTER EN VEZ DEL CLICK MUY MUY IMPORTANTE.


self.dig.nombre.setReadOnly(True)   // para solo leida de datos y bloqueada para interactuar.

// formato texto:

dig.input_1.setStyleSheet('font: 75 11pt "Arial";')

3 ------------>>> BOTONES:
def funcion():
	pass

dig.button_1.clicked.connect(funcion)


self.dig.button_2.setEnabled(True) # activa boton

self.dig.button_2.setEnabled(False) # desactiva boton

4 -------------->>>> LISTAS CON ENTRADA O ListWidgets ():

from PyQt5 import QtWidgets, uic

class Prueba:
	def __init__(self):
		self.app=QtWidgets.QApplication([])
		self.dig=uic.loadUi("tercero.ui")

		self.dig.boton1.clicked.connect(self.add_element)
		self.dig.enter1.returnPressed.connect(self.add_element)
		self.dig.enter1.setPlaceholderText(" Enter text ")
		self.dig.show()
		self.app.exec()

	def add_element(self):
		if not self.dig.enter1.text() == "":
			self.dig.enterlista.addItem(self.dig.enter1.text())
			self.dig.enter1.setText("")

yo = Prueba()


5--------------->>>> Message Box

from PyQt5.QtWidgets import *

QMessageBox(None,"title","message")


from PyQt5.QtWidgets import QMessageBox

app = QtWidgets.QApplication([])

def show(title, text):
   msgBox = QMessageBox()
   msgBox.setIcon(QMessageBox.Warning)  # we can changue by QMessageBox.Information

   msgBox.setText(text)
   msgBox.setWindowTitle(title)

   msgBox.setStandardButtons(QMessageBox.Ok)

   msgBox.exec()

show('Error','Ingrese bien su nombre por favor.')

app.exec()


6 -------------->>>> PARA INSERTAR DATOS DESDE SQLITE3 HASTA UNA TABLEWIDGET :

from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import *
import sqlite3

class Class8:
	def __init__(self):

		self.app=QtWidgets.QApplication([])
		self.dig=uic.loadUi("clase8.ui")

		self.dig.boton1.clicked.connect(self.show_data)
		self.dig.show()
		self.app.exec()

	def show_data(self):
		conn=sqlite3.connect("data8.db")
		c=conn.cursor()
		c.execute("select * from curso ")
		for row,user in enumerate(c.fetchall()):
			self.dig.entradatodo.insertRow(row)
			for column,data in enumerate(user):
				val=QtWidgets.QTableWidgetItem(str(data))
				self.dig.entradatodo.setItem(row,column,val)
		conn.commit()
		c.close()


yo = Class8()

//// ELIMINAR DATOS Y LIMPIAR LA LISTA COMPLETA :

def delete_all_table(self):
	while(self.dig.entradatodo.rowCount()>0):
		self.dig.entradatodo.removeRow(0)


7 ------------->>> CHECKBUTTONS :

self.check_val=0
if self.dig.check1.isChecked():
	self.check_val=1

8----------->>>>> CAMBIO DE FORMA IMAGEN COLOR EN QT DESINGNER :

-changeStyelSheet click

border-radius:60px;   //para que cambie de foram a redodne y pueves ver sus respectivos angulos.


https://www.youtube.com/watch?v=TRKebElniyo&t=799s  //para insertar imagenes.


9 ------------------->>> MOSTRAR IMAGENES : background :

from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import *
from PyQt5 import QtGui            //CLAVE

app=QtWidgets.QApplication([])
dig=uic.loadUi("aquitodo.ui")

dig.label1.setPixmap(QtGui.QPixmap("bgsky.png"))    //MODIFICACION.

dig.show()
app.exec()


// y el el Qt Designer  ... darle check al scaledcontents

// background pantallas

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
app.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")

# app = QtWidgets.QApplication([])  # background COLOR
# app.setStyleSheet("QMainWindow{background: black;}")

dig = uic.loadUi("desing.ui")

# w = QtWidgets.QMainWindow()  # una ventana aparte
# w.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")
# w.resize(591, 435)
# w.show()

dig.show()
app.exec()

// font of labels:

dig.label.setStyleSheet("background: white;")

10 ------------->>> TALLA DE PANTALLA:

1-click mainwindow
2-size constraints
3-selecionas lo que quieres maximo o minimo o lo que tienes con set minimun or maximun size que seria ambos.

11 ------------->>> Text Browser:

// add elements and set format:

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
app.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")

dig = uic.loadUi("desing.ui")

def send():
    dig.textBrowser.append(dig.input_1.text())
    dig.input_1.setText('')
    
dig.textBrowser.setStyleSheet('font: 75 11pt "Arial";')
dig.input_1.setStyleSheet('font: 75 11pt "Arial";')
dig.button_1.clicked.connect(send)

dig.show()
app.exec()


// scroll bar in the botton or top:

self.dig.textBrowser.verticalScrollBar().setValue(self.dig.textBrowser.verticalScrollBar().maximum()) # max
self.dig.textBrowser.verticalScrollBar().setValue(self.dig.textBrowser.verticalScrollBar().minimum()) # min

12 ------------>>> Titulo de ventana: Icono de la ventana :

self.PyQt5.QtWidgets.setWindowTitle('my window app')

from PyQt5.QtGui import QIcon
self.PyQt5.QtWidgets.setWindowIcon(QIcon('cat_and_dogs.png'))

13 ------------>>> Negrita in text_Browser:

self.tb = QTextBrowser()
self.tb.setAcceptRichText(True) # este por default esta true
self.tb.setOpenExternalLinks(True) # y este es para entrada de enlaces externos.

<b>Bold</b>  # negrita
<i>Italic</i> 
<p style="color: red">Red</p>
<p style="font-size: 20px">20px</p>
<a href="https://www.naver.com">Naver</a>

self.tb.append('<b>'+name+'</b>') # agrega un texto en negrita
self.nickname = '<font face="impact" color = "red">'+name+'</font>'
self.nickname = '<b><font color = "red">'+name+'</font></b>'

14 ------------>>> Cerrar las ventanas de PyQt5:

self.app = QtWidgets.QApplication([])
self.app.closeAllWindows()

15 ------------>>> Combo box: ComboBox :

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
dig =uic.loadUi("interface_yt.ui")

items = ['mp4-720p', 'mp4-480p', 'mp4-360p','mp3']

for i in items:
 dig.comboBox.addItem(i)   # add items

dig.comboBox.setStyleSheet('font: 75 11pt "Arial";')  # font

text = str(dig.comboBox.currentText()) # get item selected

def run(txt):
        print(txt)

dig.comboBox.activated[str].connect(run) # print text when it was selected


dig.show()
app.exec()


16 ------------>>> checkBox:

dig.checkBox.isChecked()  # Return the status of the check box. (True/False)

17 ------------>>> Progress Bar :

from PyQt5.QtWidgets import QProgressBar

app = QtWidgets.QApplication([])
dig =uic.loadUi("interface_yt.ui")

dig.progressBar.setMaximum(0)   # max and min = 0 for bar [ ///    ] => [   ///  ] => [     ///] => [///   ] => etc.
dig.progressBar.setMinimum(0)

dig.progressBar.setVisible(True) # Fasle for hiding the bar.

dig.show()
app.exec()

18 ------------>>> QtCore : QThread : Threading 

# para que no se congele las ventanas, y lleve las tareas a un segundo plano.

from urllib.request import urlopen
from PyQt5.QtCore import QThread  # this
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton

class Downloader(QThread):
    def __init__(self, url, filename):
        super().__init__()
        self._url = url
        self._filename = filename
    def run(self):
        # Abrir la dirección de URL.
        with urlopen(self._url) as r:
            with open(self._filename, "wb") as f:
                # Leer el contenido y escribirlo en un nuevo archivo.
                f.write(r.read())

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ejemplo de descarga de archivo")
        self.resize(400, 300)
        self.label = QLabel("Presione el botón para iniciar la descarga.",
            self)
        self.label.setGeometry(20, 20, 200, 25)
        self.button = QPushButton("Iniciar descarga", self)
        self.button.move(20, 60)
        self.button.pressed.connect(self.initDownload)
    
    def initDownload(self):
        self.label.setText("Descargando archivo...")
        # Deshabilitar el botón mientras se descarga el archivo.
        self.button.setEnabled(False)
        # Ejecutar la descarga en un nuevo hilo.
        self.downloader = Downloader(       # object
            "https://www.python.org/ftp/python/3.7.2/python-3.7.2.exe",
            "python-3.7.2.exe"
        )
        # Qt invocará el método `downloadFinished()` cuando el hilo 
        # haya terminado.
        self.downloader.finished.connect(self.downloadFinished)  # important
        self.downloader.start()
    
    def downloadFinished(self):
        self.label.setText("¡El archivo se ha descargado!")
        # Restablecer el botón.
        self.button.setEnabled(True)
        # Eliminar el hilo una vez que fue utilizado.
        del self.downloader
if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()

# more about this, " https://recursospython.com/guias-y-manuales/tareas-en-segundo-plano-con-pyqt/ ".

19 ------------>>> 

--------------------------------------------------------- PYQT5 (REMASTER)------------------------------------------------------------

more: https://codetorial.net/en/pyqt5/index.html
more: https://zetcode.com/pyqt/qlistwidget/

1 ------------->>> LineEdit : Entry :

from PyQt5.QtWidgets import QWidget, QApplication, QLineEdit

class MyList(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.entry = QLineEdit(self)

        self.show()


app = QApplication(sys.argv)
ex = MyList()
sys.exit(app.exec_())

2 ------------->>> QListWidget : List :

# example 1:

class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        vbox = QVBoxLayout(self)

        listWidget = QListWidget()
            
        listWidget.addItem("sparrow") 
        listWidget.addItem("robin")
        listWidget.addItem("crow")
        listWidget.addItem("raven")
        listWidget.addItem("woodpecker")
        listWidget.addItem("hummingbird")
            
        listWidget.itemDoubleClicked.connect(self.onClicked)
        
        vbox.addWidget(listWidget)
        self.setLayout(vbox)

        self.setGeometry(300, 300, 350, 250)
        self.setWindowTitle('QListWidget')
        self.show()

    def onClicked(self, item):

        QMessageBox.information(self, "Info", item.text())

# pop a item:

QListWidget.takeItem( index )


3 ------------->>>
4 ------------->>>
5 ------------->>>
6 ------------->>>
7 ------------->>>
8 ------------->>>
