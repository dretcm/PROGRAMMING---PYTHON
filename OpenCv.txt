----------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- GUIDE OpenCv -------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 -------------->>> Images (display, resize, rotate, save, flip, shape):

# read images:

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'

# -1 : cv2.IMREAD_COLOR : loads a color image(its by default).
# 0 : cv2.IMREAD_GRAYSCALE : loads a image in grayscale mode.
# 1 : cv2.IMREAD_UNCHANGED : loads imgage as such including alpha channel.

img = cv2.imread(path, -1)

cv2.imshow('Image', img) # (title, tensor)
cv2.waitKey(0)   # 0 : infinity time, until to press whatever key; 1000 : is equivalent to 10 seconds; 5000 : to 5 seconds, etc.
cv2.destroyAllWindows()

# resize images:

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'

img = cv2.imread(path, 1)
img = cv2.resize(img, (400, 400))  # (tensor, (width, height))

cv2.imshow('Image', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

## the above is equivalent to:

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'

img = cv2.imread(path, 1)
img = cv2.resize(img, (0,0), fx=0.1, fy =0.4)  # (tensor, (width, height), coor x, coor y)

cv2.imshow('Image', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

# rotate images and save images:

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'

img = cv2.imread(path, 1)
img = cv2.resize(img, (400, 400))

# cv2.ROTATE_90_CLOCKWISE
# cv2.ROTATE_90_COUNTERCLOCKWISE
# cv2.ROTATE_180

img = cv2.rotate(img, cv2.cv2.ROTATE_90_CLOCKWISE)   # clockwise(en sentido horario)

cv2.imwrite('new_img.jpg', img)   # save image (filename, tensor)

cv2.waitKey(0)
cv2.destroyAllWindows()

# flip:
# flipcode = 0: flip vertically
# flipcode = 1: flip horizontally
# flipcode = -1 : flip vertically and horizontally

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'

img = cv2.imread(path)
img = cv2.flip(img, -1)

cv2.imshow('Image', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# shape:

import cv2
path = 'c:/users/usuario/pictures/dog_aux.jpg'
img = cv2.imread(path)

print(img.shape) # output: (1200, 900, 3)

2 --------------->>>

10 -------------->>> Open Camera and configuration:

import cv2

cap = cv2.VideoCapture(0) # instead of 0, we can put a video path
cap.set(3,600) # 3 for width, 4 for height
cap.set(4,500)

while True:
    # capture frame-by-frame
    ret, frame = cap.read()  # ret: if capture something, frame for the img

    # display the resulting frame
    cv2.imshow('frame', frame)

    if cv2.waitKey(20) & 0xFF == ord('q'):  # if press the key 'q' finish capture.
        break

# when everything done, release the capture
cap.release() # finish capture
cv2.destroyAllWindows()

20 -------------->>> save videos:

import cv2 
import pyautogui
import numpy as np
from skvideo import io

if __name__ == '__main__':
    codec = cv2.VideoWriter_fourcc(*"XVID")
    out = cv2.VideoWriter("D:\Grabacion.avi", codec , 20.0, (640, 440))

    cv2.namedWindow("Grabando", cv2.WINDOW_NORMAL)
    cv2.resizeWindow("Grabando", 480, 270) #Los ultimos dos argunmentos son las dimensiones de la ventana de grabación

    while True:
        img = pyautogui.screenshot() # tomamos un pantallazo
        frame = np.asarray(img) # convertimos la imagen a un arreglo de numeros
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # Convertimos la imagen BGR a RGB
        cv2.imshow('Grabando', frame) # mostramos el cuadro que acabamos de grabar
        out.write(frame)
        if cv2.waitKey(1) == ord('q'): # si el usuario presiona 'q' paramos de grabar.
            break

    out.release() # cerrar el archivo de video
    cv2.destroyAllWindows() # cerrar la ventana

# option 2(with skvideo - pip install scikit-video):

import cv2 # OpenCV
import pyautogui
import numpy as np
from skvideo import io

if __name__ == '__main__':

    writer = io.FFmpegWriter("D:\Grabacion.avi", outputdict={
      '-vcodec': 'libx264',  #use the h.264 codec
      '-crf': '0',           #set the constant rate factor to 0, which is lossless
      '-preset':'veryslow'   #the slower the better compression, in princple, try 
                         #other options see https://trac.ffmpeg.org/wiki/Encode/H.264
    }) 

    cv2.namedWindow("Grabando", cv2.WINDOW_NORMAL)
    cv2.resizeWindow("Grabando", 480, 270) #Los ultimos dos argunmentos son las dimensiones de la ventana de grabación

    while True:
        img = pyautogui.screenshot() # tomamos un pantallazo
        frame = np.asarray(img) # convertimos la imagen a un arreglo de numeros
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # Convertimos la imagen BGR a RGB
        cv2.imshow('Grabando', frame) # mostramos el cuadro que acabamos de grabar
        writer.writeFrame(frame[:,:,::-1])
        if cv2.waitKey(1) == ord('q'): # si el usuario presiona 'q' paramos de grabar.
            break

    writer.close()
    cv2.destroyAllWindows() # cerrar la ventana

# create a video with images in your disk:

path = r"D:\images"

def generate_video(path, lenght):

        writer = io.FFmpegWriter("D:\Grabacion.avi", outputdict={
              '-vcodec': 'libx264',  #use the h.264 codec
              '-crf': '0',           #set the constant rate factor to 0, which is lossless
              '-preset':'veryslow'   #the slower the better compression, in princple, try 
                                 #other options see https://trac.ffmpeg.org/wiki/Encode/H.264
        })
        
        cv2.namedWindow("Grabando", cv2.WINDOW_NORMAL)
        cv2.resizeWindow("Grabando", 480, 270)
        
        for i in range(lenght):
            img = cv2.imread(path+'\\'+f'img{i}.jpg')
            frame = np.asarray(img)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            writer.writeFrame(frame[:,:,::-1])
            cv2.imshow('Grabando', frame)
            
        write.close()
        cv2.destroyAllWindows()

generate_video(path,361)

21 ---------------->>>